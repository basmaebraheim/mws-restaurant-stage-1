!function a(i,u,s){function c(t,e){if(!u[t]){if(!i[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=u[t]={exports:{}};i[t][0].call(o.exports,function(e){return c(i[t][1][e]||e)},o,o.exports,a,i,u,s)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<s.length;e++)c(s[e]);return c}({1:[function(e,t,n){"use strict";var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();var o=e("idb"),f=function(){function i(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i)}return r(i,null,[{key:"openDatabase",value:function(){return navigator.serviceWorker?o.open("restaurant",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("by-date","time");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("resaurant","restaurant_id")}}):Promise.resolve()}},{key:"fetchRestaurants",value:function(t){i.showCachedRestaurants(t).then(function(){fetch(i.DATABASE_URL).then(function(e){return e.json()}).then(function(n){return i.openDatabase().then(function(e){if(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");n.forEach(function(e){t.put(e)})}}),t(null,n)}).catch(function(e){return t(e,null)})})}},{key:"showCachedRestaurants",value:function(t){return i.openDatabase().then(function(e){if(e)return e.transaction("restaurants").objectStore("restaurants").getAll().then(function(e){t(null,e)})})}},{key:"fetchRestaurantById",value:function(r,o){i.showCachedRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.id==r});o(null,n[0])}}).then(function(){fetch(i.DATABASE_URL+"/"+r).then(function(e){return e.json()}).then(function(e){return o(null,e)}).catch(function(e){return o(e,null)})})}},{key:"fetchRestaurantReviews",value:function(t){return fetch("http://localhost:1337/reviews/?restaurant_id="+t).then(function(e){return e.json()}).then(function(n){return i.openDatabase().then(function(e){if(e){var t=e.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(n)?n.forEach(function(e){t.put(e)}):t.put(n)}}),Promise.resolve(n)}).catch(function(e){return i.getStoredReviewsById("reviews","restaurant",t),then(function(e){return Promise.resolve(e)})})}},{key:"getStoredReviewsById",value:function(t,n,r){return this.openDatabase().then(function(e){if(e)return e.transaction(t).objectStore(t).index(n).getAll(r)})}},{key:"fetchRestaurantByCuisine",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,a){i.fetchRestaurants(function(e,t){if(e)a(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),a(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e,t){return e.photograph?"/img/"+e.photograph+".webp":"#"}},{key:"nameForRestaurant",value:function(e){return""+e.name}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:i.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"updateFavoriteStatus",value:function(n,r){fetch("http://localhost:1337/restaurants/"+n+"/?is_favorite="+r,{method:"PUT"}).then(function(){i.openDatabase().then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");t.get(n).then(function(e){e.is_favorite=r,t.put(e)})})})}},{key:"addReview",value:function(e){var t={name:"addReview",data:e,object_type:"review"};if(navigator.onLine||"addReview"!==t.name){var n={name:e.name,rating:parseInt(e.rating),comments:e.comments,restaurant_id:e.id},r={method:"POST",body:JSON.stringify(n),headers:new Headers({"Content-Type":"application/json"})};fetch("http://localhost:1337/reviews",r).then(function(e){var t=e.headers.get("content-type");return t&&-1!==t.indexOf("application/json")?e.json():"API call successfull"}).then(function(e){console.log("fetch successfull")}).catch(function(e){return console.log(e)})}else i.sendDataWhenOnline(t)}},{key:"sendDataWhenOnline",value:function(n){localStorage.setItem("data",JSON.stringify(n.data)),window.addEventListener("online",function(e){var t=JSON.parse(localStorage.getItem("data"));[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(document.querySelectorAll(".reviews_offline"))).forEach(function(e){e.classList.remove("reviews_offline"),e.querySelector(".offline_label").remove()}),null!==t&&("addReview"===n.name&&i.addReview(n.data),localStorage.removeItem("data"))})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}}]),i}();window.markers=[],document.addEventListener("DOMContentLoaded",function(e){a(),u()});var a=function(){f.fetchNeighborhoods(function(e,t){e?console.error(e):(self.neighborhoods=t,i())})},i=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,n=document.getElementById("neighborhoods-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,t.setAttribute("role","menuitem"),n.append(t)})},u=function(){f.fetchCuisines(function(e,t){e?console.error(e):(self.cuisines=t,s())})},s=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines,n=document.getElementById("cuisines-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.setAttribute("role","menuitem"),t.value=e,n.append(t)})};window.initMap=function(){var e=document.getElementById("map-container"),t=document.createElement("button");t.innerHTML="Show Map",t.id="toggle_map",t.setAttribute("aria-label","shaw map"),t.onclick=function(){"none"===document.getElementById("map").style.display&&(document.getElementById("map").style.display="block",document.getElementById("toggle_map").style.display="none")},e.appendChild(t);self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()},self.updateRestaurants=function(){var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,o=e[n].value,a=t[r].value;f.fetchRestaurantByCuisineAndNeighborhood(o,a,function(e,t){e?console.error(e):(c(t),l())})};var c=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(function(e){return e.setMap(null)}),self.markers=[],self.restaurants=e},l=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants,t=document.getElementById("restaurants-list");e.forEach(function(e){t.append(d(e))}),p()},d=function(t){var e=document.createElement("li");e.className="grid-item";var n=document.createElement("picture");e.append(n);var r=document.createElement("source");r.media="(max-width: 350px)",r.srcset=f.imageUrlForRestaurant(t,"sm"),n.append(r);var o=document.createElement("img");o.className="restaurant-img",o.alt="An image of"+t.name+" Restaurant in "+t.neighborhood;"IntersectionObserver"in window?new IntersectionObserver(function(e,t){e.forEach(function(e){0<e.intersectionRatio&&(a(e.target),t.unobserve(e.target))})},{threshold:.1}).observe(o):(console.log("IntersectionObserver is not supported"),a(o));var a=function(e){e.src=f.imageUrlForRestaurant(t,"md")};n.append(o);var i=document.createElement("button");i.innerHTML="❤",i.classList.add="fav-btn",i.onclick=function(){var e=!t.is_favorite;f.updateFavoriteStatus(t.id,e),t.is_favorite=!t.is_favorite,h(i,t.is_favorite)},h(i,t.is_favorite),e.append(i);var u=document.createElement("h3");u.innerHTML=t.name,e.append(u);var s=document.createElement("p");s.innerHTML=t.neighborhood,e.append(s);var c=document.createElement("p");c.innerHTML=t.address,e.append(c);var l=document.createElement("a");return l.innerHTML="View Details",l.setAttribute("role","button"),l.setAttribute("aria-label","More Information About"+t.name),l.href=f.urlForRestaurant(t),e.append(l),e.setAttribute("role","article"),e},h=function(e,t){t?(e.classList.remove("not-favorite"),e.classList.add="favorite",e.setAttribute("aria-label","remove from favorites")):(e.classList.remove("favorite"),e.classList.add="not-favorite",e.setAttribute("aria-label","mark as favorite"))},p=function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var t=f.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",function(){window.location.href=t.url}),self.markers.push(t)})};navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(){console.log("Registration worked!")}).catch(function(){console.log("Registration failed!")})},{idb:2}],2:[function(e,h,t){"use strict";!function(){function i(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function a(n,r,o){var a,e=new Promise(function(e,t){i(a=n[r].apply(n,o)).then(e,t)});return e.request=a,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return a(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=a(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),i(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),s.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[s,o].forEach(function(e){a in e.prototype&&(e.prototype[a.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[a].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var d={open:function(e,t,n){var r=a(indexedDB,"open",[e,t]),o=r.request;return o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return a(indexedDB,"deleteDatabase",[e])}};void 0!==h?(h.exports=d,h.exports.default=h.exports):self.idb=d}()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
