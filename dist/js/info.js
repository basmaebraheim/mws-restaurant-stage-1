!function a(i,u,c){function s(t,e){if(!u[t]){if(!i[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=u[t]={exports:{}};i[t][0].call(o.exports,function(e){return s(i[t][1][e]||e)},o,o.exports,a,i,u,c)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<c.length;e++)s(c[e]);return s}({1:[function(e,t,n){"use strict";var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();var o=e("idb"),a=function(){function i(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i)}return r(i,null,[{key:"openDatabase",value:function(){return navigator.serviceWorker?o.open("restaurant",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("by-date","time");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("resaurant","restaurant_id")}}):Promise.resolve()}},{key:"fetchRestaurants",value:function(t){i.showCachedRestaurants(t).then(function(){fetch(i.DATABASE_URL).then(function(e){return e.json()}).then(function(n){return i.openDatabase().then(function(e){if(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");n.forEach(function(e){t.put(e)})}}),t(null,n)}).catch(function(e){return t(e,null)})})}},{key:"showCachedRestaurants",value:function(t){return i.openDatabase().then(function(e){if(e)return e.transaction("restaurants").objectStore("restaurants").getAll().then(function(e){t(null,e)})})}},{key:"fetchRestaurantById",value:function(r,o){i.showCachedRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.id==r});o(null,n[0])}}).then(function(){fetch(i.DATABASE_URL+"/"+r).then(function(e){return e.json()}).then(function(e){return o(null,e)}).catch(function(e){return o(e,null)})})}},{key:"fetchRestaurantReviews",value:function(t){return fetch("http://localhost:1337/reviews/?restaurant_id="+t).then(function(e){return e.json()}).then(function(n){return i.openDatabase().then(function(e){if(e){var t=e.transaction("reviews","readwrite").objectStore("reviews");Array.isArray(n)?n.forEach(function(e){t.put(e)}):t.put(n)}}),Promise.resolve(n)}).catch(function(e){return i.getStoredReviewsById("reviews","restaurant",t),then(function(e){return Promise.resolve(e)})})}},{key:"getStoredReviewsById",value:function(t,n,r){return this.openDatabase().then(function(e){if(e)return e.transaction(t).objectStore(t).index(n).getAll(r)})}},{key:"fetchRestaurantByCuisine",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,a){i.fetchRestaurants(function(e,t){if(e)a(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),a(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e,t){if(!e.photograph)return"#";switch(t){case"xs":return"/images/"+e.photograph+"-200_xs.jpg";case"sm":return"/images/"+e.photograph+"-400_sm.jpg";case"md":return"/images/"+e.photograph+"-600_md.jpg";case"lg":default:return"/images/"+e.photograph+"-800_lg.jpg"}}},{key:"nameForRestaurant",value:function(e){return""+e.name}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:i.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"updateFavoriteStatus",value:function(n,r){fetch("http://localhost:1337/restaurants/"+n+"/?is_favorite="+r,{method:"PUT"}).then(function(){console.log("changed"),i.openDatabase().then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");t.get(n).then(function(e){e.is_favorite=r,t.put(e)})})})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}}]),i}();window.initMap=function(){i(function(e,t){e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),f(),a.mapMarkerForRestaurant(self.restaurant,self.map))})};var i=function(n){if(self.restaurant)n(null,self.restaurant);else{var e=d("id");if(e)a.fetchRestaurantById(e,function(e,t){(self.restaurant=t)?(u(),n(null,t)):console.error(e)});else{n("No restaurant id in URL",null)}}},u=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant;document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;var t=document.getElementById("restaurant-img");t.className="restaurant-img",t.alt="an image of "+a.nameForRestaurant(e)+" restaurant in "+e.neighborhood,t.src=a.imageUrlForRestaurant(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&c(),s(e.id)},c=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant.operating_hours,t=document.getElementById("restaurant-hours");for(var n in e){var r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,r.appendChild(o);var a=document.createElement("td");a.innerHTML=e[n],r.appendChild(a),t.appendChild(r)}},s=function(e){a.fetchRestaurantReviews(e).then(function(e){var t=e,n=document.getElementById("reviews-container"),r=document.createElement("h2");if(r.innerHTML="Reviews",n.appendChild(r),!t){var o=document.createElement("p");return o.innerHTML="No reviews yet!",void n.appendChild(o)}var a=document.getElementById("reviews-list");t.forEach(function(e){a.appendChild(l(e))}),n.appendChild(a)})},l=function(e){var t=document.createElement("li");t.role="tree-item";var n=document.createElement("div");t.appendChild(n);var r=document.createElement("h3");r.innerHTML=e.name,r.className="name",r.setAttribute("tabindex","0"),n.appendChild(r);var o=document.createElement("p");o.innerHTML=e.date,o.className="date",o.setAttribute("tabindex","0"),n.appendChild(o);var a=document.createElement("p");a.innerHTML="Rating: "+e.rating,a.className="rating",a.setAttribute("tabindex","0"),t.appendChild(a);var i=document.createElement("p");return i.innerHTML=e.comments,t.appendChild(i),i.setAttribute("tabindex","0"),t.setAttribute("role","article"),t},f=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurant,t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,n.setAttribute("aria-current","page"),t.appendChild(n)},d=function(e,t){t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null};navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(){console.log("Registration worked!")}).catch(function(){console.log("Registration failed!")})},{idb:2}],2:[function(e,p,t){"use strict";!function(){function i(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function a(n,r,o){var a,e=new Promise(function(e,t){i(a=n[r].apply(n,o)).then(e,t)});return e.request=a,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return a(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=a(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function s(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new s(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),i(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),c.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(c,"_store",["name","keyPath","indexNames","autoIncrement"]),t(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(c,"_store",IDBObjectStore,["deleteIndex"]),s.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},e(s,"_tx",["objectStoreNames","mode"]),n(s,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new s(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[c,o].forEach(function(e){a in e.prototype&&(e.prototype[a.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[a].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var d={open:function(e,t,n){var r=a(indexedDB,"open",[e,t]),o=r.request;return o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return a(indexedDB,"deleteDatabase",[e])}};void 0!==p?(p.exports=d,p.exports.default=p.exports):self.idb=d}()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
