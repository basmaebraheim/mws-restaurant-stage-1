!function a(i,u,s){function c(t,e){if(!u[t]){if(!i[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(l)return l(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var o=u[t]={exports:{}};i[t][0].call(o.exports,function(e){return c(i[t][1][e]||e)},o,o.exports,a,i,u,s)}return u[t].exports}for(var l="function"==typeof require&&require,e=0;e<s.length;e++)c(s[e]);return c}({1:[function(e,t,n){"use strict";var r=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();var o=e("idb"),f=function(){function i(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i)}return r(i,null,[{key:"openDatabase",value:function(){return navigator.serviceWorker?o.open("restaurant",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurants",{keyPath:"id"}).createIndex("by-date","time");case 1:e.createObjectStore("reviews",{keyPath:"id"}).createIndex("resaurant","restaurant_id")}}):Promise.resolve()}},{key:"fetchRestaurants",value:function(t){i.showCachedRestaurants(t).then(function(){fetch(i.DATABASE_URL).then(function(e){return e.json()}).then(function(n){return i.openDatabase().then(function(e){if(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");n.forEach(function(e){t.put(e)})}}),t(null,n)}).catch(function(e){return t(e,null)})})}},{key:"showCachedRestaurants",value:function(t){return i.openDatabase().then(function(e){if(e)return e.transaction("restaurants").objectStore("restaurants").getAll().then(function(e){t(null,e)})})}},{key:"fetchRestaurantByCuisine",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});o(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,o){i.fetchRestaurants(function(e,t){if(e)o(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});o(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,o,a){i.fetchRestaurants(function(e,t){if(e)a(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=o&&(n=n.filter(function(e){return e.neighborhood==o})),a(null,n)}})}},{key:"fetchNeighborhoods",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"fetchCuisines",value:function(o){i.fetchRestaurants(function(e,n){if(e)o(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});o(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e,t){if(!e.photograph)return"#";switch(t){case"xs":return"/img/"+e.photograph+"_552.webp";case"sm":return"/img/"+e.photograph+"_653.webp";case"md":return"/img/"+e.photograph+"_752.webp";case"lg":return"/img/"+e.photograph+"_800.webp";default:return"/img/"+e.photograph+"_552.webp"}}},{key:"nameForRestaurant",value:function(e){return""+e.name}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:i.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"updateFavoriteStatus",value:function(n,r){fetch("http://localhost:1337/restaurants/"+n+"/?is_favorite="+r,{method:"PUT"}).then(function(){i.openDatabase().then(function(e){var t=e.transaction("restaurants","readwrite").objectStore("restaurants");t.get(n).then(function(e){e.is_favorite=r,t.put(e)})})})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants"}}]),i}();window.markers=[],document.addEventListener("DOMContentLoaded",function(e){a(),u()});var a=function(){f.fetchNeighborhoods(function(e,t){e?console.error(e):(self.neighborhoods=t,i())})},i=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.neighborhoods,n=document.getElementById("neighborhoods-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.value=e,t.setAttribute("role","menuitem"),n.append(t)})},u=function(){f.fetchCuisines(function(e,t){e?console.error(e):(self.cuisines=t,s())})},s=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.cuisines,n=document.getElementById("cuisines-select");e.forEach(function(e){var t=document.createElement("option");t.innerHTML=e,t.setAttribute("role","menuitem"),t.value=e,n.append(t)})};window.initMap=function(){var e=document.getElementById("map-container"),t=document.createElement("button");t.innerHTML="Show Map",t.id="toggle_map",t.setAttribute("aria-label","shaw map"),t.onclick=function(){"none"===document.getElementById("map").style.display&&(document.getElementById("map").style.display="block",document.getElementById("toggle_map").style.display="none")},e.appendChild(t);self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),updateRestaurants()},self.updateRestaurants=function(){var e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,r=t.selectedIndex,o=e[n].value,a=t[r].value;f.fetchRestaurantByCuisineAndNeighborhood(o,a,function(e,t){e?console.error(e):(c(t),l())})};var c=function(e){self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(function(e){return e.setMap(null)}),self.markers=[],self.restaurants=e},l=function(){var e=0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants,t=document.getElementById("restaurants-list");e.forEach(function(e){t.append(p(e))}),h()},p=function(t){var e=document.createElement("li");e.className="grid-item";var n=document.createElement("picture");e.append(n);var r=document.createElement("source");r.media="(max-width: 350px)",r.srcset=f.imageUrlForRestaurant(t,"sm"),n.append(r);var o=document.createElement("img");o.className="restaurant-img",o.alt="An image of"+t.name+" Restaurant in "+t.neighborhood;"IntersectionObserver"in window?new IntersectionObserver(function(e,t){e.forEach(function(e){0<e.intersectionRatio&&(a(e.target),t.unobserve(e.target))})},{threshold:.1}).observe(o):(console.log("IntersectionObserver is not supported"),a(o));var a=function(e){e.src=f.imageUrlForRestaurant(t,"md")};n.append(o);var i=document.createElement("button");i.innerHTML="❤",i.onclick=function(){var e=!t.is_favorite;f.updateFavoriteStatus(t.id,e),t.is_favorite=!t.is_favorite,d(i,t.is_favorite)},d(i,t.is_favorite),e.append(i);var u=document.createElement("h3");u.innerHTML=t.name,e.append(u);var s=document.createElement("p");s.innerHTML=t.neighborhood,e.append(s);var c=document.createElement("p");c.innerHTML=t.address,e.append(c);var l=document.createElement("a");return l.innerHTML="View Details",l.setAttribute("role","button"),l.setAttribute("aria-label","More Information About"+t.name),l.href=f.urlForRestaurant(t),e.append(l),e.setAttribute("role","article"),e},d=function(e,t){t?(e.classList.remove("not-favorite"),e.classList.add("favorite"),e.setAttribute("aria-label","remove from favorites")):(e.classList.remove("favorite"),e.classList.add("not-favorite"),e.setAttribute("aria-label","mark as favorite"))},h=function(){(0<arguments.length&&void 0!==arguments[0]?arguments[0]:self.restaurants).forEach(function(e){var t=f.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",function(){window.location.href=t.url}),self.markers.push(t)})};navigator.serviceWorker&&navigator.serviceWorker.register("/sw.js").then(function(){console.log("Registration worked!")}).catch(function(){console.log("Registration failed!")})},{idb:2}],2:[function(e,d,t){"use strict";!function(){function i(n){return new Promise(function(e,t){n.onsuccess=function(){e(n.result)},n.onerror=function(){t(n.error)}})}function a(n,r,o){var a,e=new Promise(function(e,t){i(a=n[r].apply(n,o)).then(e,t)});return e.request=a,e}function e(e,n,t){t.forEach(function(t){Object.defineProperty(e.prototype,t,{get:function(){return this[n][t]},set:function(e){this[n][t]=e}})})}function t(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return a(this[n],e,arguments)})})}function n(t,n,r,e){e.forEach(function(e){e in r.prototype&&(t.prototype[e]=function(){return this[n][e].apply(this[n],arguments)})})}function r(e,r,t,n){n.forEach(function(n){n in t.prototype&&(e.prototype[n]=function(){return e=this[r],(t=a(e,n,arguments)).then(function(e){if(e)return new u(e,t.request)});var e,t})})}function o(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function c(n){this._tx=n,this.complete=new Promise(function(e,t){n.oncomplete=function(){e()},n.onerror=function(){t(n.error)},n.onabort=function(){t(n.error)}})}function l(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new c(n)}function f(e){this._db=e}e(o,"_index",["name","keyPath","multiEntry","unique"]),t(o,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),r(o,"_index",IDBIndex,["openCursor","openKeyCursor"]),e(u,"_cursor",["direction","key","primaryKey","value"]),t(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(n){n in IDBCursor.prototype&&(u.prototype[n]=function(){var t=this,e=arguments;return Promise.resolve().then(function(){return t._cursor[n].apply(t._cursor,e),i(t._request).then(function(e){if(e)return new u(e,t._request)})})})}),s.prototype.createIndex=function(){return new o(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new o(this._store.index.apply(this._store,arguments))},e(s,"_store",["name","keyPath","indexNames","autoIncrement"]),t(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),r(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),n(s,"_store",IDBObjectStore,["deleteIndex"]),c.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},e(c,"_tx",["objectStoreNames","mode"]),n(c,"_tx",IDBTransaction,["abort"]),l.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},e(l,"_db",["name","version","objectStoreNames"]),n(l,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new c(this._db.transaction.apply(this._db,arguments))},e(f,"_db",["name","version","objectStoreNames"]),n(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(a){[s,o].forEach(function(e){a in e.prototype&&(e.prototype[a.replace("open","iterate")]=function(){var e,t=(e=arguments,Array.prototype.slice.call(e)),n=t[t.length-1],r=this._store||this._index,o=r[a].apply(r,t.slice(0,-1));o.onsuccess=function(){n(o.result)}})})}),[o,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,n){var r=this,o=[];return new Promise(function(t){r.iterateCursor(e,function(e){e?(o.push(e.value),void 0===n||o.length!=n?e.continue():t(o)):t(o)})})})});var p={open:function(e,t,n){var r=a(indexedDB,"open",[e,t]),o=r.request;return o.onupgradeneeded=function(e){n&&n(new l(o.result,e.oldVersion,o.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return a(indexedDB,"deleteDatabase",[e])}};void 0!==d?(d.exports=p,d.exports.default=d.exports):self.idb=p}()},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJpZGIiLCJNYWluREJIZWxwZXIiLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJ2YWx1ZSIsIm5hdmlnYXRvciIsInNlcnZpY2VXb3JrZXIiLCJvcGVuIiwidXBncmFkZURiIiwib2xkVmVyc2lvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImNyZWF0ZUluZGV4IiwiUHJvbWlzZSIsInJlc29sdmUiLCJjYWxsYmFjayIsInNob3dDYWNoZWRSZXN0YXVyYW50cyIsInRoZW4iLCJmZXRjaCIsIkRBVEFCQVNFX1VSTCIsInJlc3BvbnNlIiwianNvbiIsInJlc3RhdXJhbnRzIiwib3BlbkRhdGFiYXNlIiwiZGIiLCJzdG9yZSIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJmb3JFYWNoIiwicmVzdGF1cmFudCIsInB1dCIsImNhdGNoIiwiZ2V0QWxsIiwiY3Vpc2luZSIsImZldGNoUmVzdGF1cmFudHMiLCJlcnJvciIsInJlc3VsdHMiLCJmaWx0ZXIiLCJjdWlzaW5lX3R5cGUiLCJuZWlnaGJvcmhvb2QiLCJfbmVpZ2hib3Job29kcyIsIm1hcCIsInYiLCJ1bmlxdWVOZWlnaGJvcmhvb2RzIiwiaW5kZXhPZiIsIl9jdWlzaW5lcyIsInVuaXF1ZUN1aXNpbmVzIiwiaWQiLCJzaXplIiwicGhvdG9ncmFwaCIsIm5hbWUiLCJnb29nbGUiLCJtYXBzIiwiTWFya2VyIiwicG9zaXRpb24iLCJsYXRsbmciLCJ0aXRsZSIsInVybCIsInVybEZvclJlc3RhdXJhbnQiLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJEUk9QIiwicmVzdGF1cmFudElkIiwiaXNGYXZvcml0ZSIsIm1ldGhvZCIsInJlc3RhdXJhbnNTdG9yZSIsImdldCIsImlzX2Zhdm9yaXRlIiwid2luZG93IiwibWFya2VycyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZmV0Y2hOZWlnaGJvcmhvb2RzIiwiZmV0Y2hDdWlzaW5lcyIsIm5laWdoYm9yaG9vZHMiLCJjb25zb2xlIiwic2VsZiIsImZpbGxOZWlnaGJvcmhvb2RzSFRNTCIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInNlbGVjdCIsImdldEVsZW1lbnRCeUlkIiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZCIsImN1aXNpbmVzIiwiZmlsbEN1aXNpbmVzSFRNTCIsImluaXRNYXAiLCJtYXBfY29udGFpbmVyIiwidG9nZ2xlX21hcCIsIm9uY2xpY2siLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsIk1hcCIsInpvb20iLCJjZW50ZXIiLCJsYXQiLCJsbmciLCJzY3JvbGx3aGVlbCIsInVwZGF0ZVJlc3RhdXJhbnRzIiwiY1NlbGVjdCIsIm5TZWxlY3QiLCJjSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwibkluZGV4IiwiZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kIiwicmVzZXRSZXN0YXVyYW50cyIsImZpbGxSZXN0YXVyYW50c0hUTUwiLCJtIiwic2V0TWFwIiwidWwiLCJjcmVhdGVSZXN0YXVyYW50SFRNTCIsImFkZE1hcmtlcnNUb01hcCIsImxpIiwiY2xhc3NOYW1lIiwicGljdHVyZSIsInNvdXJjZTEiLCJtZWRpYSIsInNyY3NldCIsImltYWdlVXJsRm9yUmVzdGF1cmFudCIsImltYWdlIiwiYWx0IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJjaGFuZ2VzIiwib2JzZXJ2ZXIiLCJjaGFuZ2UiLCJpbnRlcnNlY3Rpb25SYXRpbyIsImxvYWRJbWFnZSIsInVub2JzZXJ2ZSIsInRocmVzaG9sZCIsIm9ic2VydmUiLCJsb2ciLCJzcmMiLCJmYXZvcml0ZSIsImlzRmF2Tm93IiwidXBkYXRlRmF2b3JpdGVTdGF0dXMiLCJzZXRGYXZFbGVtZW50Q2xhc3MiLCJhZGRyZXNzIiwibW9yZSIsImhyZWYiLCJlbGVtIiwiZmF2IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwibWFya2VyIiwibWFwTWFya2VyRm9yUmVzdGF1cmFudCIsImFkZExpc3RlbmVyIiwibG9jYXRpb24iLCJwdXNoIiwicmVnaXN0ZXIiLCIyIiwicHJvbWlzaWZ5UmVxdWVzdCIsInJlcXVlc3QiLCJyZWplY3QiLCJvbnN1Y2Nlc3MiLCJyZXN1bHQiLCJvbmVycm9yIiwicHJvbWlzaWZ5UmVxdWVzdENhbGwiLCJvYmoiLCJhcmdzIiwiYXBwbHkiLCJwcm94eVByb3BlcnRpZXMiLCJQcm94eUNsYXNzIiwidGFyZ2V0UHJvcCIsInByb3BlcnRpZXMiLCJwcm9wIiwic2V0IiwidmFsIiwicHJveHlSZXF1ZXN0TWV0aG9kcyIsInByb3h5TWV0aG9kcyIsInByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMiLCJDdXJzb3IiLCJJbmRleCIsImluZGV4IiwiX2luZGV4IiwiY3Vyc29yIiwiX2N1cnNvciIsIl9yZXF1ZXN0IiwiT2JqZWN0U3RvcmUiLCJfc3RvcmUiLCJUcmFuc2FjdGlvbiIsImlkYlRyYW5zYWN0aW9uIiwiX3R4IiwiY29tcGxldGUiLCJvbmNvbXBsZXRlIiwib25hYm9ydCIsIlVwZ3JhZGVEQiIsIl9kYiIsIkRCIiwiSURCSW5kZXgiLCJJREJDdXJzb3IiLCJtZXRob2ROYW1lIiwiSURCT2JqZWN0U3RvcmUiLCJJREJUcmFuc2FjdGlvbiIsIklEQkRhdGFiYXNlIiwiZnVuY05hbWUiLCJyZXBsYWNlIiwiYXJyIiwiQXJyYXkiLCJzbGljZSIsIm5hdGl2ZU9iamVjdCIsInF1ZXJ5IiwiY291bnQiLCJpdGVtcyIsIml0ZXJhdGVDdXJzb3IiLCJjb250aW51ZSIsImV4cCIsInZlcnNpb24iLCJ1cGdyYWRlQ2FsbGJhY2siLCJpbmRleGVkREIiLCJvbnVwZ3JhZGVuZWVkZWQiLCJkZWxldGUiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQ0FBWSxTQUFTQSxFQUFFQyxFQUFFQyxFQUFFQyxHQUFHLFNBQVNDLEVBQUVDLEVBQUVDLEdBQUcsSUFBSUosRUFBRUcsR0FBRyxDQUFDLElBQUlKLEVBQUVJLEdBQUcsQ0FBQyxJQUFJRSxFQUFFLG1CQUFtQkMsU0FBU0EsUUFBUSxJQUFJRixHQUFHQyxFQUFFLE9BQU9BLEVBQUVGLEdBQUUsR0FBSSxHQUFHSSxFQUFFLE9BQU9BLEVBQUVKLEdBQUUsR0FBSSxJQUFJSyxFQUFFLElBQUlDLE1BQU0sdUJBQXVCTixFQUFFLEtBQUssTUFBTUssRUFBRUUsS0FBSyxtQkFBbUJGLEVBQUUsSUFBSUcsRUFBRVgsRUFBRUcsR0FBRyxDQUFDUyxRQUFRLElBQUliLEVBQUVJLEdBQUcsR0FBR1UsS0FBS0YsRUFBRUMsUUFBUSxTQUFTZCxHQUFvQixPQUFPSSxFQUFsQkgsRUFBRUksR0FBRyxHQUFHTCxJQUFlQSxJQUFJYSxFQUFFQSxFQUFFQyxRQUFRZCxFQUFFQyxFQUFFQyxFQUFFQyxHQUFHLE9BQU9ELEVBQUVHLEdBQUdTLFFBQVEsSUFBSSxJQUFJTCxFQUFFLG1CQUFtQkQsU0FBU0EsUUFBUUgsRUFBRSxFQUFFQSxFQUFFRixFQUFFYSxPQUFPWCxJQUFJRCxFQUFFRCxFQUFFRSxJQUFJLE9BQU9ELEVBQTdiLENBQTRjLENBQUNhLEVBQUUsQ0FBQyxTQUFTVCxFQUFRVSxFQUFPSixHQUN4ZSxhQUVBLElBQUlLLEVBQWUsV0FBYyxTQUFTQyxFQUFpQkMsRUFBUUMsR0FBUyxJQUFLLElBQUlqQixFQUFJLEVB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QUFXLE9BQVEsQ0FBQ3BLLEVBQU1rSyxJQUNuRHZELEVBQVVwTCxFQUFFb0wsUUFRaEIsT0FOQUEsRUFBUTBELGdCQUFrQixTQUFTL0ksR0FDN0I2SSxHQUNGQSxFQUFnQixJQUFJdEIsRUFBVWxDLEVBQVFHLE9BQVF4RixFQUFNL0QsV0FBWW9KLEVBQVFuSSxlQUlyRWpELEVBQUV3QyxLQUFLLFNBQVNPLEdBQ3JCLE9BQU8sSUFBSXlLLEVBQUd6SyxNQUdsQmdNLE9BQVEsU0FBU3RLLEdBQ2YsT0FBT2dILEVBQXFCb0QsVUFBVyxpQkFBa0IsQ0FBQ3BLLFdBSXhDLElBQVhwRSxHQUNUQSxFQUFPSixRQUFVeU8sRUFDakJyTyxFQUFPSixRQUFRK08sUUFBVTNPLEVBQU9KLFNBR2hDbUcsS0FBSy9FLElBQU1xTixFQXJUZixJQXlURSxLQUFLLEdBQUcsQ0FBQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBpZGIgPSByZXF1aXJlKCdpZGInKTtcbi8qKlxyXG4gKiBDb21tb24gZGF0YWJhc2UgaGVscGVyIGZ1bmN0aW9ucy5cclxuICovXG5cbnZhciBNYWluREJIZWxwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1haW5EQkhlbHBlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWFpbkRCSGVscGVyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhNYWluREJIZWxwZXIsIG51bGwsIFt7XG4gICAga2V5OiAnb3BlbkRhdGFiYXNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlbkRhdGFiYXNlKCkge1xuICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHNlcnZpY2Ugd29ya2VyLFxuICAgICAgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBoYXZpbmcgYSBkYXRhYmFzZVxuICAgICAgaWYgKCFuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpZGIub3BlbigncmVzdGF1cmFudCcsIDIsIGZ1bmN0aW9uICh1cGdyYWRlRGIpIHtcbiAgICAgICAgc3dpdGNoICh1cGdyYWRlRGIub2xkVmVyc2lvbikge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHZhciByZXN0YXVyYW50c1N0b3JlID0gdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycsIHtcbiAgICAgICAgICAgICAga2V5UGF0aDogJ2lkJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN0YXVyYW50c1N0b3JlLmNyZWF0ZUluZGV4KCdieS1kYXRlJywgJ3RpbWUnKTtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICB2YXIgcmV2aWV3c1N0b3JlID0gdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdyZXZpZXdzJywge1xuICAgICAgICAgICAgICBrZXlQYXRoOiAnaWQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldmlld3NTdG9yZS5jcmVhdGVJbmRleCgncmVzYXVyYW50JywgJ3Jlc3RhdXJhbnRfaWQnKTtcblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBEYXRhYmFzZSBVUkwuXHJcbiAgICAgKiBDaGFuZ2UgdGhpcyB0byByZXN0YXVyYW50cy5qc29uIGZpbGUgbG9jYXRpb24gb24geW91ciBzZXJ2ZXIuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50cycsXG5cblxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggYWxsIHJlc3RhdXJhbnRzLlxyXG4gICAgICovXG5cbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hSZXN0YXVyYW50cyhjYWxsYmFjaykge1xuXG4gICAgICBNYWluREJIZWxwZXIuc2hvd0NhY2hlZFJlc3RhdXJhbnRzKGNhbGxiYWNrKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZmV0Y2goTWFpbkRCSGVscGVyLkRBVEFCQVNFX1VSTCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50cykge1xuICAgICAgICAgIE1haW5EQkhlbHBlci5vcGVuRGF0YWJhc2UoKS50aGVuKGZ1bmN0aW9uIChkYikge1xuICAgICAgICAgICAgaWYgKCFkYikgcmV0dXJuO1xuXG4gICAgICAgICAgICB2YXIgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnLCAncmVhZHdyaXRlJyk7XG4gICAgICAgICAgICB2YXIgc3RvcmUgPSB0eC5vYmplY3RTdG9yZSgncmVzdGF1cmFudHMnKTtcbiAgICAgICAgICAgIHJlc3RhdXJhbnRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3RhdXJhbnQpIHtcbiAgICAgICAgICAgICAgc3RvcmUucHV0KHJlc3RhdXJhbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIHJlc3RhdXJhbnRzKTtcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgKiBGZXRjaCBhbGwgY2FjaGVkIHJlc3RhdXJhbnRzLlxyXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2hvd0NhY2hlZFJlc3RhdXJhbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0NhY2hlZFJlc3RhdXJhbnRzKGNhbGxiYWNrKSB7XG5cbiAgICAgIHJldHVybiBNYWluREJIZWxwZXIub3BlbkRhdGFiYXNlKCkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgaWYgKCFkYikgcmV0dXJuO1xuXG4gICAgICAgIHZhciBpbmRleCA9IGRiLnRyYW5zYWN0aW9uKCdyZXN0YXVyYW50cycpLm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpO1xuICAgICAgICByZXR1cm4gaW5kZXguZ2V0QWxsKCkudGhlbihmdW5jdGlvbiAocmVzdGF1cmFudHMpIHtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50cyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lJyxcblxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCByZXN0YXVyYW50cyBieSBhIGN1aXNpbmUgdHlwZSB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmUoY3Vpc2luZSwgY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50cyAgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmdcbiAgICAgIE1haW5EQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKGZ1bmN0aW9uIChlcnJvciwgcmVzdGF1cmFudHMpIHtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIHJldHVybiByLmN1aXNpbmVfdHlwZSA9PSBjdWlzaW5lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgbmVpZ2hib3Job29kIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZldGNoUmVzdGF1cmFudEJ5TmVpZ2hib3Job29kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hSZXN0YXVyYW50QnlOZWlnaGJvcmhvb2QobmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xuICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgICBNYWluREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBGaWx0ZXIgcmVzdGF1cmFudHMgdG8gaGF2ZSBvbmx5IGdpdmVuIG5laWdoYm9yaG9vZFxuICAgICAgICAgIHZhciByZXN1bHRzID0gcmVzdGF1cmFudHMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICByZXR1cm4gci5uZWlnaGJvcmhvb2QgPT0gbmVpZ2hib3Job29kO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgY3Vpc2luZSBhbmQgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgICAgTWFpbkRCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHMgPSByZXN0YXVyYW50cztcbiAgICAgICAgICBpZiAoY3Vpc2luZSAhPSAnYWxsJykge1xuICAgICAgICAgICAgLy8gZmlsdGVyIGJ5IGN1aXNpbmVcbiAgICAgICAgICAgIHJlc3VsdHMgPSByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICByZXR1cm4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobmVpZ2hib3Job29kICE9ICdhbGwnKSB7XG4gICAgICAgICAgICAvLyBmaWx0ZXIgYnkgbmVpZ2hib3Job29kXG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHIubmVpZ2hib3Job29kID09IG5laWdoYm9yaG9vZDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBhbGwgbmVpZ2hib3Job29kcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmZXRjaE5laWdoYm9yaG9vZHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaE5laWdoYm9yaG9vZHMoY2FsbGJhY2spIHtcbiAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xuICAgICAgTWFpbkRCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gR2V0IGFsbCBuZWlnaGJvcmhvb2RzIGZyb20gYWxsIHJlc3RhdXJhbnRzXG4gICAgICAgICAgdmFyIF9uZWlnaGJvcmhvb2RzID0gcmVzdGF1cmFudHMubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudHNbaV0ubmVpZ2hib3Job29kO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFJlbW92ZSBkdXBsaWNhdGVzIGZyb20gbmVpZ2hib3Job29kc1xuICAgICAgICAgIHZhciB1bmlxdWVOZWlnaGJvcmhvb2RzID0gX25laWdoYm9yaG9vZHMuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gX25laWdoYm9yaG9vZHMuaW5kZXhPZih2KSA9PSBpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHVuaXF1ZU5laWdoYm9yaG9vZHMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEZldGNoIGFsbCBjdWlzaW5lcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmZXRjaEN1aXNpbmVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hDdWlzaW5lcyhjYWxsYmFjaykge1xuICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXG4gICAgICBNYWluREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cyhmdW5jdGlvbiAoZXJyb3IsIHJlc3RhdXJhbnRzKSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBHZXQgYWxsIGN1aXNpbmVzIGZyb20gYWxsIHJlc3RhdXJhbnRzXG4gICAgICAgICAgdmFyIF9jdWlzaW5lcyA9IHJlc3RhdXJhbnRzLm1hcChmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3RhdXJhbnRzW2ldLmN1aXNpbmVfdHlwZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXG4gICAgICAgICAgdmFyIHVuaXF1ZUN1aXNpbmVzID0gX2N1aXNpbmVzLmZpbHRlcihmdW5jdGlvbiAodiwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIF9jdWlzaW5lcy5pbmRleE9mKHYpID09IGk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlQ3Vpc2luZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJlc3RhdXJhbnQgcGFnZSBVUkwuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndXJsRm9yUmVzdGF1cmFudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgcmV0dXJuICcuL3Jlc3RhdXJhbnQuaHRtbD9pZD0nICsgcmVzdGF1cmFudC5pZDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJlc3RhdXJhbnQgaW1hZ2UgVVJMLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ltYWdlVXJsRm9yUmVzdGF1cmFudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGltYWdlVXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBzaXplKSB7XG4gICAgICBpZiAocmVzdGF1cmFudC5waG90b2dyYXBoKSB7XG4gICAgICAgIHN3aXRjaCAoc2l6ZSkge1xuICAgICAgICAgIGNhc2UgXCJ4c1wiOlxuICAgICAgICAgICAgcmV0dXJuICcvaW1nLycgKyByZXN0YXVyYW50LnBob3RvZ3JhcGggKyAnXzU1Mi53ZWJwJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJzbVwiOlxuICAgICAgICAgICAgcmV0dXJuICcvaW1nLycgKyByZXN0YXVyYW50LnBob3RvZ3JhcGggKyAnXzY1My53ZWJwJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJtZFwiOlxuICAgICAgICAgICAgcmV0dXJuICcvaW1nLycgKyByZXN0YXVyYW50LnBob3RvZ3JhcGggKyAnXzc1Mi53ZWJwJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJsZ1wiOlxuICAgICAgICAgICAgcmV0dXJuICcvaW1nLycgKyByZXN0YXVyYW50LnBob3RvZ3JhcGggKyAnXzgwMC53ZWJwJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJy9pbWcvJyArIHJlc3RhdXJhbnQucGhvdG9ncmFwaCArICdfNTUyLndlYnAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJyMnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogUmVzdGF1cmFudCBuYW1lLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ25hbWVGb3JSZXN0YXVyYW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmFtZUZvclJlc3RhdXJhbnQocmVzdGF1cmFudCkge1xuICAgICAgcmV0dXJuICcnICsgcmVzdGF1cmFudC5uYW1lO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIE1hcCBtYXJrZXIgZm9yIGEgcmVzdGF1cmFudC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtYXBNYXJrZXJGb3JSZXN0YXVyYW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWFwTWFya2VyRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBtYXApIHtcbiAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICAgICAgcG9zaXRpb246IHJlc3RhdXJhbnQubGF0bG5nLFxuICAgICAgICB0aXRsZTogcmVzdGF1cmFudC5uYW1lLFxuICAgICAgICB1cmw6IE1haW5EQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpLFxuICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgYW5pbWF0aW9uOiBnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUCB9KTtcbiAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndXBkYXRlRmF2b3JpdGVTdGF0dXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVGYXZvcml0ZVN0YXR1cyhyZXN0YXVyYW50SWQsIGlzRmF2b3JpdGUpIHtcbiAgICAgIGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjEzMzcvcmVzdGF1cmFudHMvJyArIHJlc3RhdXJhbnRJZCArICcvP2lzX2Zhdm9yaXRlPScgKyBpc0Zhdm9yaXRlLCB7XG4gICAgICAgIG1ldGhvZDogJ1BVVCdcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBNYWluREJIZWxwZXIub3BlbkRhdGFiYXNlKCkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICAgICAgICB2YXIgdHggPSBkYi50cmFuc2FjdGlvbigncmVzdGF1cmFudHMnLCAncmVhZHdyaXRlJyk7XG4gICAgICAgICAgdmFyIHJlc3RhdXJhbnNTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdyZXN0YXVyYW50cycpO1xuICAgICAgICAgIHJlc3RhdXJhbnNTdG9yZS5nZXQocmVzdGF1cmFudElkKS50aGVuKGZ1bmN0aW9uIChyZXN0YXVyYW50KSB7XG4gICAgICAgICAgICByZXN0YXVyYW50LmlzX2Zhdm9yaXRlID0gaXNGYXZvcml0ZTtcbiAgICAgICAgICAgIHJlc3RhdXJhbnNTdG9yZS5wdXQocmVzdGF1cmFudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnREFUQUJBU0VfVVJMJyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBwb3J0ID0gMTMzNzsgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBzZXJ2ZXIgcG9ydFxuICAgICAgcmV0dXJuICdodHRwOi8vbG9jYWxob3N0OicgKyBwb3J0ICsgJy9yZXN0YXVyYW50cyc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1haW5EQkhlbHBlcjtcbn0oKTtcblxudmFyIHJlc3RhdXJhbnRzID0gdm9pZCAwLFxuICAgIG5laWdoYm9yaG9vZHMgPSB2b2lkIDAsXG4gICAgY3Vpc2luZXMgPSB2b2lkIDA7XG52YXIgbWFwO1xud2luZG93Lm1hcmtlcnMgPSBbXTtcblxuLyoqXHJcbiAqIEZldGNoIG5laWdoYm9yaG9vZHMgYW5kIGN1aXNpbmVzIGFzIHNvb24gYXMgdGhlIHBhZ2UgaXMgbG9hZGVkLlxyXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgZmV0Y2hOZWlnaGJvcmhvb2RzKCk7XG4gIGZldGNoQ3Vpc2luZXMoKTtcbn0pO1xuXG4vKipcclxuICogRmV0Y2ggYWxsIG5laWdoYm9yaG9vZHMgYW5kIHNldCB0aGVpciBIVE1MLlxyXG4gKi9cbnZhciBmZXRjaE5laWdoYm9yaG9vZHMgPSBmdW5jdGlvbiBmZXRjaE5laWdoYm9yaG9vZHMoKSB7XG4gIE1haW5EQkhlbHBlci5mZXRjaE5laWdoYm9yaG9vZHMoZnVuY3Rpb24gKGVycm9yLCBuZWlnaGJvcmhvb2RzKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAvLyBHb3QgYW4gZXJyb3JcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLm5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzO1xuICAgICAgZmlsbE5laWdoYm9yaG9vZHNIVE1MKCk7XG4gICAgfVxuICB9KTtcbn07XG5cbi8qKlxyXG4gKiBTZXQgbmVpZ2hib3Job29kcyBIVE1MLlxyXG4gKi9cbnZhciBmaWxsTmVpZ2hib3Job29kc0hUTUwgPSBmdW5jdGlvbiBmaWxsTmVpZ2hib3Job29kc0hUTUwoKSB7XG4gIHZhciBuZWlnaGJvcmhvb2RzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBzZWxmLm5laWdoYm9yaG9vZHM7XG5cbiAgdmFyIHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCduZWlnaGJvcmhvb2RzLXNlbGVjdCcpO1xuICBuZWlnaGJvcmhvb2RzLmZvckVhY2goZnVuY3Rpb24gKG5laWdoYm9yaG9vZCkge1xuICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gbmVpZ2hib3Job29kO1xuICAgIG9wdGlvbi52YWx1ZSA9IG5laWdoYm9yaG9vZDtcbiAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcIm1lbnVpdGVtXCIpO1xuXG4gICAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xuICB9KTtcbn07XG5cbi8qKlxyXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxyXG4gKi9cbnZhciBmZXRjaEN1aXNpbmVzID0gZnVuY3Rpb24gZmV0Y2hDdWlzaW5lcygpIHtcbiAgTWFpbkRCSGVscGVyLmZldGNoQ3Vpc2luZXMoZnVuY3Rpb24gKGVycm9yLCBjdWlzaW5lcykge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgLy8gR290IGFuIGVycm9yIVxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuY3Vpc2luZXMgPSBjdWlzaW5lcztcbiAgICAgIGZpbGxDdWlzaW5lc0hUTUwoKTtcbiAgICB9XG4gIH0pO1xufTtcblxuLyoqXHJcbiAqIFNldCBjdWlzaW5lcyBIVE1MLlxyXG4gKi9cbnZhciBmaWxsQ3Vpc2luZXNIVE1MID0gZnVuY3Rpb24gZmlsbEN1aXNpbmVzSFRNTCgpIHtcbiAgdmFyIGN1aXNpbmVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBzZWxmLmN1aXNpbmVzO1xuXG4gIHZhciBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG5cbiAgY3Vpc2luZXMuZm9yRWFjaChmdW5jdGlvbiAoY3Vpc2luZSkge1xuICAgIHZhciBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICBvcHRpb24uaW5uZXJIVE1MID0gY3Vpc2luZTtcbiAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcIm1lbnVpdGVtXCIpO1xuICAgIG9wdGlvbi52YWx1ZSA9IGN1aXNpbmU7XG4gICAgc2VsZWN0LmFwcGVuZChvcHRpb24pO1xuICB9KTtcbn07XG5cbi8qKlxyXG4gKiBJbml0aWFsaXplIEdvb2dsZSBtYXAsIGNhbGxlZCBmcm9tIEhUTUwuXHJcbiAqL1xud2luZG93LmluaXRNYXAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBtYXBfY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtYXAtY29udGFpbmVyXCIpO1xuICB2YXIgdG9nZ2xlX21hcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICB0b2dnbGVfbWFwLmlubmVySFRNTCA9IFwiU2hvdyBNYXBcIjtcbiAgdG9nZ2xlX21hcC5pZCA9IFwidG9nZ2xlX21hcFwiO1xuICB0b2dnbGVfbWFwLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgXCJzaGF3IG1hcFwiKTtcbiAgdG9nZ2xlX21hcC5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJykuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9nZ2xlX21hcCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICB9O1xuICBtYXBfY29udGFpbmVyLmFwcGVuZENoaWxkKHRvZ2dsZV9tYXApO1xuICB2YXIgbG9jID0ge1xuICAgIGxhdDogNDAuNzIyMjE2LFxuICAgIGxuZzogLTczLjk4NzUwMVxuICB9O1xuICBzZWxmLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG4gICAgem9vbTogMTIsXG4gICAgY2VudGVyOiBsb2MsXG4gICAgc2Nyb2xsd2hlZWw6IGZhbHNlXG4gIH0pO1xuICB1cGRhdGVSZXN0YXVyYW50cygpO1xufTtcblxuLyoqXHJcbiAqIFVwZGF0ZSBwYWdlIGFuZCBtYXAgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMuXHJcbiAqL1xuc2VsZi51cGRhdGVSZXN0YXVyYW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XG4gIHZhciBuU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XG5cbiAgdmFyIGNJbmRleCA9IGNTZWxlY3Quc2VsZWN0ZWRJbmRleDtcbiAgdmFyIG5JbmRleCA9IG5TZWxlY3Quc2VsZWN0ZWRJbmRleDtcblxuICB2YXIgY3Vpc2luZSA9IGNTZWxlY3RbY0luZGV4XS52YWx1ZTtcbiAgdmFyIG5laWdoYm9yaG9vZCA9IG5TZWxlY3RbbkluZGV4XS52YWx1ZTtcblxuICBNYWluREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgZnVuY3Rpb24gKGVycm9yLCByZXN0YXVyYW50cykge1xuICAgIGlmIChlcnJvcikge1xuICAgICAgLy8gR290IGFuIGVycm9yIVxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc2V0UmVzdGF1cmFudHMocmVzdGF1cmFudHMpO1xuICAgICAgZmlsbFJlc3RhdXJhbnRzSFRNTCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcclxuICogQ2xlYXIgY3VycmVudCByZXN0YXVyYW50cywgdGhlaXIgSFRNTCBhbmQgcmVtb3ZlIHRoZWlyIG1hcCBtYXJrZXJzLlxyXG4gKi9cbnZhciByZXNldFJlc3RhdXJhbnRzID0gZnVuY3Rpb24gcmVzZXRSZXN0YXVyYW50cyhyZXN0YXVyYW50cykge1xuICAvLyBSZW1vdmUgYWxsIHJlc3RhdXJhbnRzXG4gIHNlbGYucmVzdGF1cmFudHMgPSBbXTtcbiAgdmFyIHVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jlc3RhdXJhbnRzLWxpc3QnKTtcbiAgdWwuaW5uZXJIVE1MID0gJyc7XG5cbiAgLy8gUmVtb3ZlIGFsbCBtYXAgbWFya2Vyc1xuICBzZWxmLm1hcmtlcnMuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLnNldE1hcChudWxsKTtcbiAgfSk7XG4gIHNlbGYubWFya2VycyA9IFtdO1xuICBzZWxmLnJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHM7XG59O1xuXG4vKipcclxuICogQ3JlYXRlIGFsbCByZXN0YXVyYW50cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cclxuICovXG52YXIgZmlsbFJlc3RhdXJhbnRzSFRNTCA9IGZ1bmN0aW9uIGZpbGxSZXN0YXVyYW50c0hUTUwoKSB7XG4gIHZhciByZXN0YXVyYW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogc2VsZi5yZXN0YXVyYW50cztcblxuICB2YXIgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xuICByZXN0YXVyYW50cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN0YXVyYW50KSB7XG4gICAgdWwuYXBwZW5kKGNyZWF0ZVJlc3RhdXJhbnRIVE1MKHJlc3RhdXJhbnQpKTtcbiAgfSk7XG4gIGFkZE1hcmtlcnNUb01hcCgpO1xufTtcblxuLyoqXHJcbiAqIENyZWF0ZSByZXN0YXVyYW50IEhUTUwuXHJcbiAqL1xudmFyIGNyZWF0ZVJlc3RhdXJhbnRIVE1MID0gZnVuY3Rpb24gY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCkge1xuICB2YXIgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpO1xuICBsaS5jbGFzc05hbWUgPSAnZ3JpZC1pdGVtJztcbiAgdmFyIHBpY3R1cmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwaWN0dXJlJyk7XG4gIGxpLmFwcGVuZChwaWN0dXJlKTtcblxuICB2YXIgc291cmNlMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuICBzb3VyY2UxLm1lZGlhID0gXCIobWF4LXdpZHRoOiAzNTBweClcIjtcbiAgc291cmNlMS5zcmNzZXQgPSBNYWluREJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsICdzbScpO1xuICBwaWN0dXJlLmFwcGVuZChzb3VyY2UxKTtcblxuICB2YXIgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgaW1hZ2UuY2xhc3NOYW1lID0gJ3Jlc3RhdXJhbnQtaW1nJztcbiAgaW1hZ2UuYWx0ID0gXCJBbiBpbWFnZSBvZlwiICsgcmVzdGF1cmFudC5uYW1lICsgXCIgUmVzdGF1cmFudCBpbiBcIiArIHJlc3RhdXJhbnQubmVpZ2hib3Job29kO1xuICB2YXIgY29uZmlnID0ge1xuICAgIHRocmVzaG9sZDogMC4xXG4gIH07XG4gIHZhciBvYnNlcnZlciA9IHZvaWQgMDtcbiAgaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIob25DaGFuZ2UsIGNvbmZpZyk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShpbWFnZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ0ludGVyc2VjdGlvbk9ic2VydmVyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICBsb2FkSW1hZ2UoaW1hZ2UpO1xuICB9XG4gIHZhciBsb2FkSW1hZ2UgPSBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2UpIHtcbiAgICBpbWFnZS5zcmMgPSBNYWluREJIZWxwZXIuaW1hZ2VVcmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQsICdtZCcpO1xuICB9O1xuICBmdW5jdGlvbiBvbkNoYW5nZShjaGFuZ2VzLCBvYnNlcnZlcikge1xuICAgIGNoYW5nZXMuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgICBpZiAoY2hhbmdlLmludGVyc2VjdGlvblJhdGlvID4gMCkge1xuICAgICAgICBsb2FkSW1hZ2UoY2hhbmdlLnRhcmdldCk7XG4gICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZShjaGFuZ2UudGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBwaWN0dXJlLmFwcGVuZChpbWFnZSk7XG5cbiAgdmFyIGZhdm9yaXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gIGZhdm9yaXRlLmlubmVySFRNTCA9ICfinaQnO1xuXG4gIGZhdm9yaXRlLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGlzRmF2Tm93ID0gIXJlc3RhdXJhbnQuaXNfZmF2b3JpdGU7XG4gICAgTWFpbkRCSGVscGVyLnVwZGF0ZUZhdm9yaXRlU3RhdHVzKHJlc3RhdXJhbnQuaWQsIGlzRmF2Tm93KTtcbiAgICByZXN0YXVyYW50LmlzX2Zhdm9yaXRlID0gIXJlc3RhdXJhbnQuaXNfZmF2b3JpdGU7XG4gICAgc2V0RmF2RWxlbWVudENsYXNzKGZhdm9yaXRlLCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlKTtcbiAgfTtcbiAgc2V0RmF2RWxlbWVudENsYXNzKGZhdm9yaXRlLCByZXN0YXVyYW50LmlzX2Zhdm9yaXRlKTtcblxuICBsaS5hcHBlbmQoZmF2b3JpdGUpO1xuXG4gIHZhciBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDMnKTtcbiAgbmFtZS5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5hbWU7XG4gIGxpLmFwcGVuZChuYW1lKTtcblxuICB2YXIgbmVpZ2hib3Job29kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBuZWlnaGJvcmhvb2QuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uZWlnaGJvcmhvb2Q7XG4gIGxpLmFwcGVuZChuZWlnaGJvcmhvb2QpO1xuXG4gIHZhciBhZGRyZXNzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBhZGRyZXNzLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuYWRkcmVzcztcbiAgbGkuYXBwZW5kKGFkZHJlc3MpO1xuXG4gIHZhciBtb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBtb3JlLmlubmVySFRNTCA9ICdWaWV3IERldGFpbHMnO1xuICBtb3JlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJidXR0b25cIik7XG4gIG1vcmUuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIk1vcmUgSW5mb3JtYXRpb24gQWJvdXRcIiArIHJlc3RhdXJhbnQubmFtZSk7XG4gIG1vcmUuaHJlZiA9IE1haW5EQkhlbHBlci51cmxGb3JSZXN0YXVyYW50KHJlc3RhdXJhbnQpO1xuICBsaS5hcHBlbmQobW9yZSk7XG4gIGxpLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhcnRpY2xlXCIpO1xuICByZXR1cm4gbGk7XG59O1xuXG4vKipcclxuICogIGNoYW5nZSBmYXZvcml0ZSBlbGVtZW50IGNsYXNzIGFmdGVyIGNsaWNrLlxyXG4gKi9cbnZhciBzZXRGYXZFbGVtZW50Q2xhc3MgPSBmdW5jdGlvbiBzZXRGYXZFbGVtZW50Q2xhc3MoZWxlbSwgZmF2KSB7XG4gIGlmICghZmF2KSB7XG4gICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdmYXZvcml0ZScpO1xuICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgnbm90LWZhdm9yaXRlJyk7XG4gICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnbWFyayBhcyBmYXZvcml0ZScpO1xuICB9IGVsc2Uge1xuXG4gICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdub3QtZmF2b3JpdGUnKTtcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ2Zhdm9yaXRlJyk7XG4gICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAncmVtb3ZlIGZyb20gZmF2b3JpdGVzJyk7XG4gIH1cbn07XG4vKipcclxuICogQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcC5cclxuICovXG52YXIgYWRkTWFya2Vyc1RvTWFwID0gZnVuY3Rpb24gYWRkTWFya2Vyc1RvTWFwKCkge1xuICB2YXIgcmVzdGF1cmFudHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHNlbGYucmVzdGF1cmFudHM7XG5cbiAgcmVzdGF1cmFudHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdGF1cmFudCkge1xuICAgIC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxuICAgIHZhciBtYXJrZXIgPSBNYWluREJIZWxwZXIubWFwTWFya2VyRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBzZWxmLm1hcCk7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyLCAnY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1hcmtlci51cmw7XG4gICAgfSk7XG4gICAgc2VsZi5tYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgfSk7XG59O1xuXG52YXIgc3dhcF9tYXAgPSBmdW5jdGlvbiBzd2FwX21hcCgpIHtcbiAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAnKS5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJykuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRpY19tYXAnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG59O1xuLyoqXHJcbiAqIHN0YXJ0IHNldmljZSB3b3JrZXIgUmVnaXN0cmF0aW9uLlxyXG4gKi9cbnZhciBzdGFydFNlcnZpY2VXb3JrZXIgPSBmdW5jdGlvbiBzdGFydFNlcnZpY2VXb3JrZXIoKSB7XG4gIGlmICghbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHJldHVybjtcblxuICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcignL3N3LmpzJykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coJ1JlZ2lzdHJhdGlvbiB3b3JrZWQhJyk7XG4gIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIGZhaWxlZCEnKTtcbiAgfSk7XG59O1xuc3RhcnRTZXJ2aWNlV29ya2VyKCk7XG5cbn0se1wiaWRiXCI6Mn1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xuICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBwLnJlcXVlc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlQcm9wZXJ0aWVzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdGhpc1t0YXJnZXRQcm9wXVtwcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ211bHRpRW50cnknLFxuICAgICd1bmlxdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdnZXQnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgW1xuICAgICdkaXJlY3Rpb24nLFxuICAgICdrZXknLFxuICAgICdwcmltYXJ5S2V5JyxcbiAgICAndmFsdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgW1xuICAgICd1cGRhdGUnLFxuICAgICdkZWxldGUnXG4gIF0pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvciA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmNyZWF0ZUluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnaW5kZXhOYW1lcycsXG4gICAgJ2F1dG9JbmNyZW1lbnQnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdwdXQnLFxuICAgICdhZGQnLFxuICAgICdkZWxldGUnLFxuICAgICdjbGVhcicsXG4gICAgJ2dldCcsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEtleScsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdkZWxldGVJbmRleCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90eCA9IGlkYlRyYW5zYWN0aW9uO1xuICAgIHRoaXMuY29tcGxldGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl90eC5vYmplY3RTdG9yZS5hcHBseSh0aGlzLl90eCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFRyYW5zYWN0aW9uLCAnX3R4JywgW1xuICAgICdvYmplY3RTdG9yZU5hbWVzJyxcbiAgICAnbW9kZSdcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFtcbiAgICAnYWJvcnQnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFVwZ3JhZGVEQihkYiwgb2xkVmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBVcGdyYWRlREIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl9kYi5jcmVhdGVPYmplY3RTdG9yZS5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFVwZ3JhZGVEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVXBncmFkZURCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnZGVsZXRlT2JqZWN0U3RvcmUnLFxuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gREIoZGIpIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICB9XG5cbiAgREIucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICAvLyBBZGQgY3Vyc29yIGl0ZXJhdG9yc1xuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyB3aXRoIHByb21pc2VzXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xuICAgIFtPYmplY3RTdG9yZSwgSW5kZXhdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICAgIC8vIERvbid0IGNyZWF0ZSBpdGVyYXRlS2V5Q3Vyc29yIGlmIG9wZW5LZXlDdXJzb3IgZG9lc24ndCBleGlzdC5cbiAgICAgIGlmICghKGZ1bmNOYW1lIGluIENvbnN0cnVjdG9yLnByb3RvdHlwZSkpIHJldHVybjtcblxuICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW2Z1bmNOYW1lLnJlcGxhY2UoJ29wZW4nLCAnaXRlcmF0ZScpXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJnc1thcmdzLmxlbmd0aCAtIDFdO1xuICAgICAgICB2YXIgbmF0aXZlT2JqZWN0ID0gdGhpcy5fc3RvcmUgfHwgdGhpcy5faW5kZXg7XG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmF0aXZlT2JqZWN0W2Z1bmNOYW1lXS5hcHBseShuYXRpdmVPYmplY3QsIGFyZ3Muc2xpY2UoMCwgLTEpKTtcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LnJlc3VsdCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBwb2x5ZmlsbCBnZXRBbGxcbiAgW0luZGV4LCBPYmplY3RTdG9yZV0uZm9yRWFjaChmdW5jdGlvbihDb25zdHJ1Y3Rvcikge1xuICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0QWxsKSByZXR1cm47XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uKHF1ZXJ5LCBjb3VudCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICAgIHZhciBpdGVtcyA9IFtdO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBpbnN0YW5jZS5pdGVyYXRlQ3Vyc29yKHF1ZXJ5LCBmdW5jdGlvbihjdXJzb3IpIHtcbiAgICAgICAgICBpZiAoIWN1cnNvcikge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW1zLnB1c2goY3Vyc29yLnZhbHVlKTtcblxuICAgICAgICAgIGlmIChjb3VudCAhPT0gdW5kZWZpbmVkICYmIGl0ZW1zLmxlbmd0aCA9PSBjb3VudCkge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnNvci5jb250aW51ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG4gIHZhciBleHAgPSB7XG4gICAgb3BlbjogZnVuY3Rpb24obmFtZSwgdmVyc2lvbiwgdXBncmFkZUNhbGxiYWNrKSB7XG4gICAgICB2YXIgcCA9IHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ29wZW4nLCBbbmFtZSwgdmVyc2lvbl0pO1xuICAgICAgdmFyIHJlcXVlc3QgPSBwLnJlcXVlc3Q7XG5cbiAgICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgaWYgKHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgICAgIHVwZ3JhZGVDYWxsYmFjayhuZXcgVXBncmFkZURCKHJlcXVlc3QucmVzdWx0LCBldmVudC5vbGRWZXJzaW9uLCByZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24oZGIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEQihkYik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlbGV0ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKGluZGV4ZWREQiwgJ2RlbGV0ZURhdGFiYXNlJywgW25hbWVdKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBleHA7XG4gICAgbW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IG1vZHVsZS5leHBvcnRzO1xuICB9XG4gIGVsc2Uge1xuICAgIHNlbGYuaWRiID0gZXhwO1xuICB9XG59KCkpO1xuXG59LHt9XX0se30sWzFdKVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW01dlpHVmZiVzlrZFd4bGN5OWljbTkzYzJWeUxYQmhZMnN2WDNCeVpXeDFaR1V1YW5NaUxDSmthWE4wTDJwekwyTnZibU5oZEMxdFlXbHVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMmxrWWk5c2FXSXZhV1JpTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPenM3T3pzN08wRkRRVUVzU1VGQlNTeE5RVUZOTEZGQlFWRXNTMEZCVWl4RFFVRldPMEZCUTBFN096czdTVUZIVFN4Wk96czdPenM3TzIxRFFVTnJRanRCUVVOd1FqdEJRVU5CTzBGQlEwRXNWVUZCU1N4RFFVRkRMRlZCUVZVc1lVRkJaaXhGUVVFNFFqdEJRVU0xUWl4bFFVRlBMRkZCUVZFc1QwRkJVaXhGUVVGUU8wRkJRMFE3TzBGQlJVUXNZVUZCVHl4SlFVRkpMRWxCUVVvc1EwRkJVeXhaUVVGVUxFVkJRWFZDTEVOQlFYWkNMRVZCUVRCQ0xGVkJRVk1zVTBGQlZDeEZRVUZ2UWp0QlFVTnVSQ3huUWtGQlVTeFZRVUZWTEZWQlFXeENPMEZCUTBrc1pVRkJTeXhEUVVGTU8wRkJRMFVzWjBKQlFVMHNiVUpCUVcxQ0xGVkJRVlVzYVVKQlFWWXNRMEZCTkVJc1lVRkJOVUlzUlVGQk1rTTdRVUZEYkVVc2RVSkJRVk03UVVGRWVVUXNZVUZCTTBNc1EwRkJla0k3UVVGSFFTdzJRa0ZCYVVJc1YwRkJha0lzUTBGQk5rSXNVMEZCTjBJc1JVRkJkME1zVFVGQmVFTTdRVUZEUml4bFFVRkxMRU5CUVV3N1FVRkRSU3huUWtGQlNTeGxRVUZsTEZWQlFWVXNhVUpCUVZZc1EwRkJORUlzVTBGQk5VSXNSVUZCZFVNN1FVRkRlRVFzZFVKQlFWTTdRVUZFSzBNc1lVRkJka01zUTBGQmJrSTdRVUZIUVN4NVFrRkJZU3hYUVVGaUxFTkJRWGxDTEZkQlFYcENMRVZCUVhORExHVkJRWFJET3p0QlFWWk9PMEZCWTBRc1QwRm1UU3hEUVVGUU8wRkJaMEpFTzBGQlEwUTdPenM3T3pzN096dEJRVk5CT3pzN08zRkRRVWwzUWl4UkxFVkJRVlU3TzBGQlJXaERMRzFDUVVGaExIRkNRVUZpTEVOQlFXMURMRkZCUVc1RExFVkJRVFpETEVsQlFUZERMRU5CUVd0RUxGbEJRVTA3UVVGRGRFUXNZMEZCVFN4aFFVRmhMRmxCUVc1Q0xFVkJRV2xETEVsQlFXcERMRU5CUVhORE8wRkJRVUVzYVVKQlFWa3NVMEZCVXl4SlFVRlVMRVZCUVZvN1FVRkJRU3hUUVVGMFF5eEZRVU5ETEVsQlJFUXNRMEZEVFN4MVFrRkJaVHRCUVVOdVFpeDFRa0ZCWVN4WlFVRmlMRWRCUVRSQ0xFbEJRVFZDTEVOQlFXbERMRlZCUVZNc1JVRkJWQ3hGUVVGaE8wRkJRelZETEdkQ1FVRkpMRU5CUVVNc1JVRkJUQ3hGUVVGVE96dEJRVVZVTEdkQ1FVRkpMRXRCUVVzc1IwRkJSeXhYUVVGSUxFTkJRV1VzWVVGQlppeEZRVUU0UWl4WFFVRTVRaXhEUVVGVU8wRkJRMEVzWjBKQlFVa3NVVUZCVVN4SFFVRkhMRmRCUVVnc1EwRkJaU3hoUVVGbUxFTkJRVm83UVVGRFFTeDNRa0ZCV1N4UFFVRmFMRU5CUVc5Q0xGVkJRVk1zVlVGQlZDeEZRVUZ4UWp0QlFVTjJReXh2UWtGQlRTeEhRVUZPTEVOQlFWVXNWVUZCVmp0QlFVTkVMR0ZCUmtRN1FVRkhSQ3hYUVZKRU8wRkJVMEVzYVVKQlFVOHNVMEZCVXl4SlFVRlVMRVZCUVdVc1YwRkJaaXhEUVVGUU8wRkJRMFFzVTBGYVJDeEZRV0ZETEV0QllrUXNRMEZoVHp0QlFVRkJMR2xDUVVGTExGTkJRVk1zUTBGQlZDeEZRVUZaTEVsQlFWb3NRMEZCVER0QlFVRkJMRk5CWWxBN1FVRmpSQ3hQUVdaRU8wRkJhVUpFTzBGQlEwRTdPenM3T3pzd1EwRkhORUlzVVN4RlFVRlZPenRCUVVWeVF5eGhRVUZQTEdGQlFXRXNXVUZCWWl4SFFVRTBRaXhKUVVFMVFpeERRVUZwUXl4VlFVRlRMRVZCUVZRc1JVRkJZVHRCUVVOdVJDeFpRVUZKTEVOQlFVTXNSVUZCVEN4RlFVRlZPenRCUVVWV0xGbEJRVWtzVVVGQlVTeEhRVUZITEZkQlFVZ3NRMEZCWlN4aFFVRm1MRVZCUTFRc1YwRkVVeXhEUVVOSExHRkJSRWdzUTBGQldqdEJRVVZCTEdWQlFVOHNUVUZCVFN4TlFVRk9MRWRCUVdVc1NVRkJaaXhEUVVGdlFpeFZRVUZETEZkQlFVUXNSVUZCYVVJN1FVRkRNVU1zYlVKQlFWTXNTVUZCVkN4RlFVRmxMRmRCUVdZN1FVRkZSQ3hUUVVoTkxFTkJRVkE3UVVGSlJDeFBRVlJOTEVOQlFWQTdRVUZWUkRzN096czdRVUZGUkRzN096WkRRVWRuUXl4UExFVkJRVk1zVVN4RlFVRlZPMEZCUTJwRU8wRkJRMEVzYlVKQlFXRXNaMEpCUVdJc1EwRkJPRUlzVlVGQlF5eExRVUZFTEVWQlFWRXNWMEZCVWl4RlFVRjNRanRCUVVOd1JDeFpRVUZKTEV0QlFVb3NSVUZCVnp0QlFVTlVMRzFDUVVGVExFdEJRVlFzUlVGQlowSXNTVUZCYUVJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFREdEJRVU5CTEdOQlFVMHNWVUZCVlN4WlFVRlpMRTFCUVZvc1EwRkJiVUk3UVVGQlFTeHRRa0ZCU3l4RlFVRkZMRmxCUVVZc1NVRkJhMElzVDBGQmRrSTdRVUZCUVN4WFFVRnVRaXhEUVVGb1FqdEJRVU5CTEcxQ1FVRlRMRWxCUVZRc1JVRkJaU3hQUVVGbU8wRkJRMFE3UVVGRFJpeFBRVkpFTzBGQlUwUTdPMEZCUlVRN096czdPenRyUkVGSGNVTXNXU3hGUVVGakxGRXNSVUZCVlR0QlFVTXpSRHRCUVVOQkxHMUNRVUZoTEdkQ1FVRmlMRU5CUVRoQ0xGVkJRVU1zUzBGQlJDeEZRVUZSTEZkQlFWSXNSVUZCZDBJN1FVRkRjRVFzV1VGQlNTeExRVUZLTEVWQlFWYzdRVUZEVkN4dFFrRkJVeXhMUVVGVUxFVkJRV2RDTEVsQlFXaENPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHc3UVVGRFFTeGpRVUZOTEZWQlFWVXNXVUZCV1N4TlFVRmFMRU5CUVcxQ08wRkJRVUVzYlVKQlFVc3NSVUZCUlN4WlFVRkdMRWxCUVd0Q0xGbEJRWFpDTzBGQlFVRXNWMEZCYmtJc1EwRkJhRUk3UVVGRFFTeHRRa0ZCVXl4SlFVRlVMRVZCUVdVc1QwRkJaanRCUVVORU8wRkJRMFlzVDBGU1JEdEJRVk5FT3p0QlFVVkVPenM3T3pzN05FUkJSeXRETEU4c1JVRkJVeXhaTEVWQlFXTXNVU3hGUVVGVk8wRkJRemxGTzBGQlEwRXNiVUpCUVdFc1owSkJRV0lzUTBGQk9FSXNWVUZCUXl4TFFVRkVMRVZCUVZFc1YwRkJVaXhGUVVGM1FqdEJRVU53UkN4WlFVRkpMRXRCUVVvc1JVRkJWenRCUVVOVUxHMUNRVUZUTEV0QlFWUXNSVUZCWjBJc1NVRkJhRUk3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4alFVRkpMRlZCUVZVc1YwRkJaRHRCUVVOQkxHTkJRVWtzVjBGQlZ5eExRVUZtTEVWQlFYTkNPMEZCUVVVN1FVRkRkRUlzYzBKQlFWVXNVVUZCVVN4TlFVRlNMRU5CUVdVN1FVRkJRU3h4UWtGQlN5eEZRVUZGTEZsQlFVWXNTVUZCYTBJc1QwRkJka0k3UVVGQlFTeGhRVUZtTEVOQlFWWTdRVUZEUkR0QlFVTkVMR05CUVVrc1owSkJRV2RDTEV0QlFYQkNMRVZCUVRKQ08wRkJRVVU3UVVGRE0wSXNjMEpCUVZVc1VVRkJVU3hOUVVGU0xFTkJRV1U3UVVGQlFTeHhRa0ZCU3l4RlFVRkZMRmxCUVVZc1NVRkJhMElzV1VGQmRrSTdRVUZCUVN4aFFVRm1MRU5CUVZZN1FVRkRSRHRCUVVORUxHMUNRVUZUTEVsQlFWUXNSVUZCWlN4UFFVRm1PMEZCUTBRN1FVRkRSaXhQUVdKRU8wRkJZMFE3TzBGQlJVUTdPenM3T3p0MVEwRkhNRUlzVVN4RlFVRlZPMEZCUTJ4RE8wRkJRMEVzYlVKQlFXRXNaMEpCUVdJc1EwRkJPRUlzVlVGQlF5eExRVUZFTEVWQlFWRXNWMEZCVWl4RlFVRjNRanRCUVVOd1JDeFpRVUZKTEV0QlFVb3NSVUZCVnp0QlFVTlVMRzFDUVVGVExFdEJRVlFzUlVGQlowSXNTVUZCYUVJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFREdEJRVU5CTEdOQlFVMHNhVUpCUVdkQ0xGbEJRVmtzUjBGQldpeERRVUZuUWl4VlFVRkRMRU5CUVVRc1JVRkJTU3hEUVVGS08wRkJRVUVzYlVKQlFWVXNXVUZCV1N4RFFVRmFMRVZCUVdVc1dVRkJla0k3UVVGQlFTeFhRVUZvUWl4RFFVRjBRanRCUVVOQk8wRkJRMEVzWTBGQlRTeHpRa0ZCYzBJc1pVRkJZeXhOUVVGa0xFTkJRWEZDTEZWQlFVTXNRMEZCUkN4RlFVRkpMRU5CUVVvN1FVRkJRU3h0UWtGQlZTeGxRVUZqTEU5QlFXUXNRMEZCYzBJc1EwRkJkRUlzUzBGQk5FSXNRMEZCZEVNN1FVRkJRU3hYUVVGeVFpeERRVUUxUWp0QlFVTkJMRzFDUVVGVExFbEJRVlFzUlVGQlpTeHRRa0ZCWmp0QlFVTkVPMEZCUTBZc1QwRldSRHRCUVZkRU96dEJRVVZFT3pzN096czdhME5CUjNGQ0xGRXNSVUZCVlR0QlFVTTNRanRCUVVOQkxHMUNRVUZoTEdkQ1FVRmlMRU5CUVRoQ0xGVkJRVU1zUzBGQlJDeEZRVUZSTEZkQlFWSXNSVUZCZDBJN1FVRkRjRVFzV1VGQlNTeExRVUZLTEVWQlFWYzdRVUZEVkN4dFFrRkJVeXhMUVVGVUxFVkJRV2RDTEVsQlFXaENPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHc3UVVGRFFTeGpRVUZOTEZsQlFWY3NXVUZCV1N4SFFVRmFMRU5CUVdkQ0xGVkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVbzdRVUZCUVN4dFFrRkJWU3haUVVGWkxFTkJRVm9zUlVGQlpTeFpRVUY2UWp0QlFVRkJMRmRCUVdoQ0xFTkJRV3BDTzBGQlEwRTdRVUZEUVN4alFVRk5MR2xDUVVGcFFpeFZRVUZUTEUxQlFWUXNRMEZCWjBJc1ZVRkJReXhEUVVGRUxFVkJRVWtzUTBGQlNqdEJRVUZCTEcxQ1FVRlZMRlZCUVZNc1QwRkJWQ3hEUVVGcFFpeERRVUZxUWl4TFFVRjFRaXhEUVVGcVF6dEJRVUZCTEZkQlFXaENMRU5CUVhaQ08wRkJRMEVzYlVKQlFWTXNTVUZCVkN4RlFVRmxMR05CUVdZN1FVRkRSRHRCUVVOR0xFOUJWa1E3UVVGWFJEczdRVUZGUkRzN096czdPM0ZEUVVkM1FpeFZMRVZCUVZrN1FVRkRiRU1zZFVOQlFXZERMRmRCUVZjc1JVRkJNME03UVVGRFJEczdRVUZGUkRzN096czdPekJEUVVjMlFpeFZMRVZCUVdFc1NTeEZRVUZOTzBGQlF6bERMRlZCUVVjc1YwRkJWeXhWUVVGa0xFVkJRWGxDTzBGQlEzWkNMR2RDUVVGUExFbEJRVkE3UVVGRFJTeGxRVUZMTEVsQlFVdzdRVUZEVFN3MlFrRkJaMElzVjBGQlZ5eFZRVUV6UWp0QlFVTkdPMEZCUTBvc1pVRkJTeXhKUVVGTU8wRkJRMDBzTmtKQlFXZENMRmRCUVZjc1ZVRkJNMEk3UVVGRFJqdEJRVU5LTEdWQlFVc3NTVUZCVER0QlFVTk5MRFpDUVVGblFpeFhRVUZYTEZWQlFUTkNPMEZCUTBZN1FVRkRTaXhsUVVGTExFbEJRVXc3UVVGRFRTdzJRa0ZCWjBJc1YwRkJWeXhWUVVFelFqdEJRVU5HTzBGQlEwbzdRVUZEVFN3MlFrRkJaMElzVjBGQlZ5eFZRVUV6UWp0QlFXUlNPMEZCWjBKRUxFOUJha0pFTEUxQmFVSk5PMEZCUTBZN1FVRkRTRHRCUVVWR096dEJRVWRFT3pzN096czdjME5CUjNsQ0xGVXNSVUZCV1R0QlFVTnVReXhyUWtGQlZ5eFhRVUZYTEVsQlFYUkNPMEZCUTBRN1FVRkRSRHM3T3pzN096SkRRVWM0UWl4VkxFVkJRVmtzUnl4RlFVRkxPMEZCUXpkRExGVkJRVTBzVTBGQlV5eEpRVUZKTEU5QlFVOHNTVUZCVUN4RFFVRlpMRTFCUVdoQ0xFTkJRWFZDTzBGQlEzQkRMR3RDUVVGVkxGZEJRVmNzVFVGRVpUdEJRVVZ3UXl4bFFVRlBMRmRCUVZjc1NVRkdhMEk3UVVGSGNFTXNZVUZCU3l4aFFVRmhMR2RDUVVGaUxFTkJRVGhDTEZWQlFUbENMRU5CU0N0Q08wRkJTWEJETEdGQlFVc3NSMEZLSzBJN1FVRkxjRU1zYlVKQlFWY3NUMEZCVHl4SlFVRlFMRU5CUVZrc1UwRkJXaXhEUVVGelFpeEpRVXhITEVWQlFYWkNMRU5CUVdZN1FVRlBRU3hoUVVGUExFMUJRVkE3UVVGRFJEczdPM2xEUVVVeVFpeFpMRVZCUVdNc1ZTeEZRVUZaTzBGQlEzQkVMRzFFUVVFeVF5eFpRVUV6UXl4elFrRkJkMFVzVlVGQmVFVXNSVUZCYzBZN1FVRkRjRVlzWjBKQlFWRTdRVUZFTkVVc1QwRkJkRVlzUlVGSFF5eEpRVWhFTEVOQlIwMHNXVUZCVFR0QlFVTldMSEZDUVVGaExGbEJRV0lzUjBGRFJ5eEpRVVJJTEVOQlExRXNZMEZCVFR0QlFVTldMR05CUVUwc1MwRkJTeXhIUVVGSExGZEJRVWdzUTBGQlpTeGhRVUZtTEVWQlFTdENMRmRCUVM5Q0xFTkJRVmc3UVVGRFFTeGpRVUZOTEd0Q1FVRnJRaXhIUVVGSExGZEJRVWdzUTBGQlpTeGhRVUZtTEVOQlFYaENPMEZCUTBFc01FSkJRV2RDTEVkQlFXaENMRU5CUVc5Q0xGbEJRWEJDTEVWQlEwY3NTVUZFU0N4RFFVTlJMSE5DUVVGak8wRkJRMnhDTEhWQ1FVRlhMRmRCUVZnc1IwRkJlVUlzVlVGQmVrSTdRVUZEUVN3MFFrRkJaMElzUjBGQmFFSXNRMEZCYjBJc1ZVRkJjRUk3UVVGRFJDeFhRVXBJTzBGQlMwUXNVMEZVU0R0QlFWVkVMRTlCWkVRN1FVRmxSRHM3TzNkQ1FUbE5lVUk3UVVGRGVFSXNWVUZCVFN4UFFVRlBMRWxCUVdJc1EwRkVkMElzUTBGRFRqdEJRVU5zUWl4dFEwRkJNa0lzU1VGQk0wSTdRVUZEUkRzN096czdPMEZCSzAxSUxFbEJRVWtzYjBKQlFVbzdRVUZCUVN4SlFVTkZMSE5DUVVSR08wRkJRVUVzU1VGRlJTeHBRa0ZHUmp0QlFVZEJMRWxCUVVrc1IwRkJTanRCUVVOQkxFOUJRVThzVDBGQlVDeEhRVUZwUWl4RlFVRnFRanM3UVVGRlFUczdPMEZCUjBFc1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4clFrRkJNVUlzUlVGQk9FTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRka1E3UVVGRFFUdEJRVU5FTEVOQlNFUTdPMEZCUzBFN096dEJRVWRCTEVsQlFVMHNjVUpCUVhGQ0xGTkJRWEpDTEd0Q1FVRnhRaXhIUVVGTk8wRkJReTlDTEdWQlFXRXNhMEpCUVdJc1EwRkJaME1zVlVGQlF5eExRVUZFTEVWQlFWRXNZVUZCVWl4RlFVRXdRanRCUVVONFJDeFJRVUZKTEV0QlFVb3NSVUZCVnp0QlFVRkZPMEZCUTFnc1kwRkJVU3hMUVVGU0xFTkJRV01zUzBGQlpEdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRmRCUVVzc1lVRkJUQ3hIUVVGeFFpeGhRVUZ5UWp0QlFVTkJPMEZCUTBRN1FVRkRSaXhIUVZCRU8wRkJVVVFzUTBGVVJEczdRVUZYUVRzN08wRkJSMEVzU1VGQlRTeDNRa0ZCZDBJc1UwRkJlRUlzY1VKQlFYZENMRWRCUVhkRE8wRkJRVUVzVFVGQmRrTXNZVUZCZFVNc2RVVkJRWFpDTEV0QlFVc3NZVUZCYTBJN08wRkJRM0JGTEUxQlFVMHNVMEZCVXl4VFFVRlRMR05CUVZRc1EwRkJkMElzYzBKQlFYaENMRU5CUVdZN1FVRkRRU3huUWtGQll5eFBRVUZrTEVOQlFYTkNMSGRDUVVGblFqdEJRVU53UXl4UlFVRk5MRk5CUVZNc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEZGQlFYWkNMRU5CUVdZN1FVRkRRU3hYUVVGUExGTkJRVkFzUjBGQmJVSXNXVUZCYmtJN1FVRkRRU3hYUVVGUExFdEJRVkFzUjBGQlpTeFpRVUZtTzBGQlEwRXNWMEZCVHl4WlFVRlFMRU5CUVc5Q0xFMUJRWEJDTEVWQlFUUkNMRlZCUVRWQ096dEJRVVZCTEZkQlFVOHNUVUZCVUN4RFFVRmpMRTFCUVdRN1FVRkRSQ3hIUVZCRU8wRkJVVVFzUTBGV1JEczdRVUZaUVRzN08wRkJSMEVzU1VGQlRTeG5Ra0ZCWjBJc1UwRkJhRUlzWVVGQlowSXNSMEZCVFR0QlFVTXhRaXhsUVVGaExHRkJRV0lzUTBGQk1rSXNWVUZCUXl4TFFVRkVMRVZCUVZFc1VVRkJVaXhGUVVGeFFqdEJRVU01UXl4UlFVRkpMRXRCUVVvc1JVRkJWenRCUVVGRk8wRkJRMWdzWTBGQlVTeExRVUZTTEVOQlFXTXNTMEZCWkR0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxGZEJRVXNzVVVGQlRDeEhRVUZuUWl4UlFVRm9RanRCUVVOQk8wRkJRMFE3UVVGRFJpeEhRVkJFTzBGQlVVUXNRMEZVUkRzN1FVRlhRVHM3TzBGQlIwRXNTVUZCVFN4dFFrRkJiVUlzVTBGQmJrSXNaMEpCUVcxQ0xFZEJRVGhDTzBGQlFVRXNUVUZCTjBJc1VVRkJOa0lzZFVWQlFXeENMRXRCUVVzc1VVRkJZVHM3UVVGRGNrUXNUVUZCVFN4VFFVRlRMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeHBRa0ZCZUVJc1EwRkJaanM3UVVGRlFTeFhRVUZUTEU5QlFWUXNRMEZCYVVJc2JVSkJRVmM3UVVGRE1VSXNVVUZCVFN4VFFVRlRMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFJRVUYyUWl4RFFVRm1PMEZCUTBFc1YwRkJUeXhUUVVGUUxFZEJRVzFDTEU5QlFXNUNPMEZCUTBFc1YwRkJUeXhaUVVGUUxFTkJRVzlDTEUxQlFYQkNMRVZCUVRKQ0xGVkJRVE5DTzBGQlEwRXNWMEZCVHl4TFFVRlFMRWRCUVdVc1QwRkJaanRCUVVOQkxGZEJRVThzVFVGQlVDeERRVUZqTEUxQlFXUTdRVUZEUkN4SFFVNUVPMEZCVDBRc1EwRldSRHM3UVVGWlFUczdPMEZCUjBFc1QwRkJUeXhQUVVGUUxFZEJRV2xDTEZsQlFVMDdRVUZEY2tJc1RVRkJUU3huUWtGQlowSXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xHVkJRWGhDTEVOQlFYUkNPMEZCUTBFc1RVRkJUU3hoUVVGaExGTkJRVk1zWVVGQlZDeERRVUYxUWl4UlFVRjJRaXhEUVVGdVFqdEJRVU5CTEdGQlFWY3NVMEZCV0N4SFFVRjFRaXhWUVVGMlFqdEJRVU5CTEdGQlFWY3NSVUZCV0N4SFFVRm5RaXhaUVVGb1FqdEJRVU5CTEdGQlFWY3NXVUZCV0N4RFFVRjNRaXhaUVVGNFFpeEZRVUZ6UXl4VlFVRjBRenRCUVVOQkxHRkJRVmNzVDBGQldDeEhRVUZ2UWl4WlFVRlhPMEZCUXpkQ0xGRkJRVWtzVTBGQlV5eGpRVUZVTEVOQlFYZENMRXRCUVhoQ0xFVkJRU3RDTEV0QlFTOUNMRU5CUVhGRExFOUJRWEpETEV0QlFXbEVMRTFCUVhKRUxFVkJRMFU3UVVGRFJTeGxRVUZUTEdOQlFWUXNRMEZCZDBJc1MwRkJlRUlzUlVGQkswSXNTMEZCTDBJc1EwRkJjVU1zVDBGQmNrTXNSMEZCSzBNc1QwRkJMME03UVVGRFFTeGxRVUZUTEdOQlFWUXNRMEZCZDBJc1dVRkJlRUlzUlVGQmMwTXNTMEZCZEVNc1EwRkJORU1zVDBGQk5VTXNSMEZCYzBRc1RVRkJkRVE3UVVGRFJEdEJRVU5LTEVkQlRrUTdRVUZQUVN4blFrRkJZeXhYUVVGa0xFTkJRVEJDTEZWQlFURkNPMEZCUTBFc1RVRkJTU3hOUVVGTk8wRkJRMUlzVTBGQlN5eFRRVVJITzBGQlJWSXNVMEZCU3l4RFFVRkRPMEZCUmtVc1IwRkJWanRCUVVsQkxFOUJRVXNzUjBGQlRDeEhRVUZYTEVsQlFVa3NUMEZCVHl4SlFVRlFMRU5CUVZrc1IwRkJhRUlzUTBGQmIwSXNVMEZCVXl4alFVRlVMRU5CUVhkQ0xFdEJRWGhDTEVOQlFYQkNMRVZCUVc5RU8wRkJRemRFTEZWQlFVMHNSVUZFZFVRN1FVRkZOMFFzV1VGQlVTeEhRVVp4UkR0QlFVYzNSQ3hwUWtGQllUdEJRVWhuUkN4SFFVRndSQ3hEUVVGWU8wRkJTMEU3UVVGRFJDeERRWGhDUkRzN1FVRXdRa0U3T3p0QlFVZEJMRXRCUVVzc2FVSkJRVXdzUjBGQmVVSXNXVUZCVFR0QlFVTTNRaXhOUVVGTkxGVkJRVlVzVTBGQlV5eGpRVUZVTEVOQlFYZENMR2xDUVVGNFFpeERRVUZvUWp0QlFVTkJMRTFCUVUwc1ZVRkJWU3hUUVVGVExHTkJRVlFzUTBGQmQwSXNjMEpCUVhoQ0xFTkJRV2hDT3p0QlFVVkJMRTFCUVUwc1UwRkJVeXhSUVVGUkxHRkJRWFpDTzBGQlEwRXNUVUZCVFN4VFFVRlRMRkZCUVZFc1lVRkJka0k3TzBGQlJVRXNUVUZCVFN4VlFVRlZMRkZCUVZFc1RVRkJVaXhGUVVGblFpeExRVUZvUXp0QlFVTkJMRTFCUVUwc1pVRkJaU3hSUVVGUkxFMUJRVklzUlVGQlowSXNTMEZCY2tNN08wRkJSVUVzWlVGQllTeDFRMEZCWWl4RFFVRnhSQ3hQUVVGeVJDeEZRVUU0UkN4WlFVRTVSQ3hGUVVFMFJTeFZRVUZETEV0QlFVUXNSVUZCVVN4WFFVRlNMRVZCUVhkQ08wRkJRMnhITEZGQlFVa3NTMEZCU2l4RlFVRlhPMEZCUVVVN1FVRkRXQ3hqUVVGUkxFdEJRVklzUTBGQll5eExRVUZrTzBGQlEwUXNTMEZHUkN4TlFVVlBPMEZCUTB3c2RVSkJRV2xDTEZkQlFXcENPMEZCUTBFN1FVRkRSRHRCUVVOR0xFZEJVRVE3UVVGUlJDeERRV3hDUkRzN1FVRnZRa0U3T3p0QlFVZEJMRWxCUVUwc2JVSkJRVzFDTEZOQlFXNUNMR2RDUVVGdFFpeERRVUZETEZkQlFVUXNSVUZCYVVJN1FVRkRlRU03UVVGRFFTeFBRVUZMTEZkQlFVd3NSMEZCYlVJc1JVRkJia0k3UVVGRFFTeE5RVUZOTEV0QlFVc3NVMEZCVXl4alFVRlVMRU5CUVhkQ0xHdENRVUY0UWl4RFFVRllPMEZCUTBFc1MwRkJSeXhUUVVGSUxFZEJRV1VzUlVGQlpqczdRVUZGUVR0QlFVTkJMRTlCUVVzc1QwRkJUQ3hEUVVGaExFOUJRV0lzUTBGQmNVSTdRVUZCUVN4WFFVRkxMRVZCUVVVc1RVRkJSaXhEUVVGVExFbEJRVlFzUTBGQlREdEJRVUZCTEVkQlFYSkNPMEZCUTBFc1QwRkJTeXhQUVVGTUxFZEJRV1VzUlVGQlpqdEJRVU5CTEU5QlFVc3NWMEZCVEN4SFFVRnRRaXhYUVVGdVFqdEJRVU5FTEVOQlZrUTdPMEZCV1VFN096dEJRVWRCTEVsQlFVMHNjMEpCUVhOQ0xGTkJRWFJDTEcxQ1FVRnpRaXhIUVVGdlF6dEJRVUZCTEUxQlFXNURMRmRCUVcxRExIVkZRVUZ5UWl4TFFVRkxMRmRCUVdkQ096dEJRVU01UkN4TlFVRk5MRXRCUVVzc1UwRkJVeXhqUVVGVUxFTkJRWGRDTEd0Q1FVRjRRaXhEUVVGWU8wRkJRMEVzWTBGQldTeFBRVUZhTEVOQlFXOUNMSE5DUVVGak8wRkJRMmhETEU5QlFVY3NUVUZCU0N4RFFVRlZMSEZDUVVGeFFpeFZRVUZ5UWl4RFFVRldPMEZCUTBRc1IwRkdSRHRCUVVkQk8wRkJRMFFzUTBGT1JEczdRVUZSUVRzN08wRkJSMEVzU1VGQlRTeDFRa0ZCZFVJc1UwRkJka0lzYjBKQlFYVkNMRU5CUVVNc1ZVRkJSQ3hGUVVGblFqdEJRVU16UXl4TlFVRk5MRXRCUVVzc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVsQlFYWkNMRU5CUVZnN1FVRkRRU3hMUVVGSExGTkJRVWdzUjBGQlpTeFhRVUZtTzBGQlEwRXNUVUZCVFN4VlFVRlZMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFRRVUYyUWl4RFFVRm9RanRCUVVOQkxFdEJRVWNzVFVGQlNDeERRVUZWTEU5QlFWWTdPMEZCUlVFc1RVRkJUU3hWUVVGVkxGTkJRVk1zWVVGQlZDeERRVUYxUWl4UlFVRjJRaXhEUVVGb1FqdEJRVU5CTEZWQlFWRXNTMEZCVWl4SFFVRm5RaXh2UWtGQmFFSTdRVUZEUVN4VlFVRlJMRTFCUVZJc1IwRkJhVUlzWVVGQllTeHhRa0ZCWWl4RFFVRnRReXhWUVVGdVF5eEZRVUZuUkN4SlFVRm9SQ3hEUVVGcVFqdEJRVU5CTEZWQlFWRXNUVUZCVWl4RFFVRmxMRTlCUVdZN08wRkJSVUVzVFVGQlRTeFJRVUZSTEZOQlFWTXNZVUZCVkN4RFFVRjFRaXhMUVVGMlFpeERRVUZrTzBGQlEwRXNVVUZCVFN4VFFVRk9MRWRCUVd0Q0xHZENRVUZzUWp0QlFVTkJMRkZCUVUwc1IwRkJUaXhIUVVGWExHZENRVUZsTEZkQlFWY3NTVUZCTVVJc1IwRkJaME1zYVVKQlFXaERMRWRCUVc5RUxGZEJRVmNzV1VGQk1VVTdRVUZEUVN4TlFVRk5MRk5CUVZNN1FVRkRZaXhsUVVGWE8wRkJSRVVzUjBGQlpqdEJRVWRCTEUxQlFVa3NhVUpCUVVvN1FVRkRRU3hOUVVGSkxEQkNRVUV3UWl4TlFVRTVRaXhGUVVGelF6dEJRVU53UXl4bFFVRlhMRWxCUVVrc2IwSkJRVW9zUTBGQmVVSXNVVUZCZWtJc1JVRkJiME1zVFVGQmNFTXNRMEZCV0R0QlFVTkJMR0ZCUVZNc1QwRkJWQ3hEUVVGcFFpeExRVUZxUWp0QlFVTkVMRWRCU0VRc1RVRkhUenRCUVVOTUxGbEJRVkVzUjBGQlVpeERRVUZaTEhWRFFVRmFPMEZCUTBFc1kwRkJWU3hMUVVGV08wRkJRMFE3UVVGRFJDeE5RVUZOTEZsQlFWa3NVMEZCV2l4VFFVRlpMRkZCUVZNN1FVRkRla0lzVlVGQlRTeEhRVUZPTEVkQlFWa3NZVUZCWVN4eFFrRkJZaXhEUVVGdFF5eFZRVUZ1UXl4RlFVRm5SQ3hKUVVGb1JDeERRVUZhTzBGQlJVUXNSMEZJUkR0QlFVbEJMRmRCUVZNc1VVRkJWQ3hEUVVGdFFpeFBRVUZ1UWl4RlFVRTJRaXhSUVVFM1FpeEZRVUYxUXp0QlFVTnVReXhaUVVGUkxFOUJRVklzUTBGQlowSXNhMEpCUVZVN1FVRkRlRUlzVlVGQlNTeFBRVUZQTEdsQ1FVRlFMRWRCUVRKQ0xFTkJRUzlDTEVWQlFXdERPMEZCUTJoRExHdENRVUZWTEU5QlFVOHNUVUZCYWtJN1FVRkRRU3hwUWtGQlV5eFRRVUZVTEVOQlFXMUNMRTlCUVU4c1RVRkJNVUk3UVVGRFJEdEJRVU5HTEV0QlRFUTdRVUZOU0R0QlFVTkVMRlZCUVZFc1RVRkJVaXhEUVVGbExFdEJRV1k3TzBGQlJVRXNUVUZCVFN4WFFVRlhMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeFJRVUYyUWl4RFFVRnFRanRCUVVOQkxGZEJRVk1zVTBGQlZDeEhRVUZ4UWl4SFFVRnlRanM3UVVGRlFTeFhRVUZUTEU5QlFWUXNSMEZCYlVJc1dVRkJWenRCUVVNMVFpeFJRVUZOTEZkQlFWY3NRMEZCUXl4WFFVRlhMRmRCUVRkQ08wRkJRMEVzYVVKQlFXRXNiMEpCUVdJc1EwRkJhME1zVjBGQlZ5eEZRVUUzUXl4RlFVRnBSQ3hSUVVGcVJEdEJRVU5CTEdWQlFWY3NWMEZCV0N4SFFVRjVRaXhEUVVGRExGZEJRVmNzVjBGQmNrTTdRVUZEUVN4MVFrRkJiVUlzVVVGQmJrSXNSVUZCT0VJc1YwRkJWeXhYUVVGNlF6dEJRVU5FTEVkQlRFUTdRVUZOUVN4eFFrRkJiVUlzVVVGQmJrSXNSVUZCT0VJc1YwRkJWeXhYUVVGNlF6czdRVUZGUVN4TFFVRkhMRTFCUVVnc1EwRkJWU3hSUVVGV096dEJRVVZCTEUxQlFVMHNUMEZCVHl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzU1VGQmRrSXNRMEZCWWp0QlFVTkJMRTlCUVVzc1UwRkJUQ3hIUVVGcFFpeFhRVUZYTEVsQlFUVkNPMEZCUTBFc1MwRkJSeXhOUVVGSUxFTkJRVlVzU1VGQlZqczdRVUZGUVN4TlFVRk5MR1ZCUVdVc1UwRkJVeXhoUVVGVUxFTkJRWFZDTEVkQlFYWkNMRU5CUVhKQ08wRkJRMEVzWlVGQllTeFRRVUZpTEVkQlFYbENMRmRCUVZjc1dVRkJjRU03UVVGRFFTeExRVUZITEUxQlFVZ3NRMEZCVlN4WlFVRldPenRCUVVWQkxFMUJRVTBzVlVGQlZTeFRRVUZUTEdGQlFWUXNRMEZCZFVJc1IwRkJka0lzUTBGQmFFSTdRVUZEUVN4VlFVRlJMRk5CUVZJc1IwRkJiMElzVjBGQlZ5eFBRVUV2UWp0QlFVTkJMRXRCUVVjc1RVRkJTQ3hEUVVGVkxFOUJRVlk3TzBGQlJVRXNUVUZCVFN4UFFVRlBMRk5CUVZNc1lVRkJWQ3hEUVVGMVFpeEhRVUYyUWl4RFFVRmlPMEZCUTBFc1QwRkJTeXhUUVVGTUxFZEJRV2xDTEdOQlFXcENPMEZCUTBFc1QwRkJTeXhaUVVGTUxFTkJRV3RDTEUxQlFXeENMRVZCUVRCQ0xGRkJRVEZDTzBGQlEwRXNUMEZCU3l4WlFVRk1MRU5CUVd0Q0xGbEJRV3hDTEVWQlFXZERMREpDUVVGNVFpeFhRVUZYTEVsQlFYQkZPMEZCUTBFc1QwRkJTeXhKUVVGTUxFZEJRVmtzWVVGQllTeG5Ra0ZCWWl4RFFVRTRRaXhWUVVFNVFpeERRVUZhTzBGQlEwRXNTMEZCUnl4TlFVRklMRU5CUVZVc1NVRkJWanRCUVVOQkxFdEJRVWNzV1VGQlNDeERRVUZuUWl4TlFVRm9RaXhGUVVGNVFpeFRRVUY2UWp0QlFVTkJMRk5CUVU4c1JVRkJVRHRCUVVORUxFTkJlRVZFT3p0QlFUQkZRVHM3TzBGQlIwRXNTVUZCVFN4eFFrRkJjVUlzVTBGQmNrSXNhMEpCUVhGQ0xFTkJRVU1zU1VGQlJDeEZRVUZSTEVkQlFWSXNSVUZCWjBJN1FVRkRla01zVFVGQlNTeERRVUZETEVkQlFVd3NSVUZCVlR0QlFVTlNMRk5CUVVzc1UwRkJUQ3hEUVVGbExFMUJRV1lzUTBGQmMwSXNWVUZCZEVJN1FVRkRRU3hUUVVGTExGTkJRVXdzUTBGQlpTeEhRVUZtTEVOQlFXMUNMR05CUVc1Q08wRkJRMEVzVTBGQlN5eFpRVUZNTEVOQlFXdENMRmxCUVd4Q0xFVkJRV2xETEd0Q1FVRnFRenRCUVVkRUxFZEJUa1FzVFVGTlRUczdRVUZGU2l4VFFVRkxMRk5CUVV3c1EwRkJaU3hOUVVGbUxFTkJRWE5DTEdOQlFYUkNPMEZCUTBFc1UwRkJTeXhUUVVGTUxFTkJRV1VzUjBGQlppeERRVUZ0UWl4VlFVRnVRanRCUVVOQkxGTkJRVXNzV1VGQlRDeERRVUZyUWl4WlFVRnNRaXhGUVVGcFF5eDFRa0ZCYWtNN1FVRkRSRHRCUVVWR0xFTkJaRVE3UVVGbFFUczdPMEZCUjBFc1NVRkJUU3hyUWtGQmEwSXNVMEZCYkVJc1pVRkJhMElzUjBGQmIwTTdRVUZCUVN4TlFVRnVReXhYUVVGdFF5eDFSVUZCY2tJc1MwRkJTeXhYUVVGblFqczdRVUZETVVRc1kwRkJXU3hQUVVGYUxFTkJRVzlDTEhOQ1FVRmpPMEZCUTJoRE8wRkJRMEVzVVVGQlRTeFRRVUZUTEdGQlFXRXNjMEpCUVdJc1EwRkJiME1zVlVGQmNFTXNSVUZCWjBRc1MwRkJTeXhIUVVGeVJDeERRVUZtTzBGQlEwRXNWMEZCVHl4SlFVRlFMRU5CUVZrc1MwRkJXaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhOUVVFNVFpeEZRVUZ6UXl4UFFVRjBReXhGUVVFclF5eFpRVUZOTzBGQlEyNUVMR0ZCUVU4c1VVRkJVQ3hEUVVGblFpeEpRVUZvUWl4SFFVRjFRaXhQUVVGUExFZEJRVGxDTzBGQlEwUXNTMEZHUkR0QlFVZEJMRk5CUVVzc1QwRkJUQ3hEUVVGaExFbEJRV0lzUTBGQmEwSXNUVUZCYkVJN1FVRkRSQ3hIUVZCRU8wRkJVVVFzUTBGVVJEczdRVUZYUVN4SlFVRk5MRmRCUVZjc1UwRkJXQ3hSUVVGWExFZEJRVTA3UVVGRGNrSXNUVUZCU1N4VFFVRlRMR05CUVZRc1EwRkJkMElzUzBGQmVFSXNSVUZCSzBJc1MwRkJMMElzUTBGQmNVTXNUMEZCY2tNc1MwRkJhVVFzVFVGQmNrUXNSVUZEUVR0QlFVTkZMR0ZCUVZNc1kwRkJWQ3hEUVVGM1FpeExRVUY0UWl4RlFVRXJRaXhMUVVFdlFpeERRVUZ4UXl4UFFVRnlReXhIUVVFclF5eFBRVUV2UXp0QlFVTkJMR0ZCUVZNc1kwRkJWQ3hEUVVGM1FpeFpRVUY0UWl4RlFVRnpReXhMUVVGMFF5eERRVUUwUXl4UFFVRTFReXhIUVVGelJDeE5RVUYwUkR0QlFVTkVPMEZCUTBZc1EwRk9SRHRCUVU5Qk96czdRVUZIUVN4SlFVRk5MSEZDUVVGeFFpeFRRVUZ5UWl4clFrRkJjVUlzUjBGQlN6dEJRVU0xUWl4TlFVRkpMRU5CUVVNc1ZVRkJWU3hoUVVGbUxFVkJRVGhDT3p0QlFVVTVRaXhaUVVGVkxHRkJRVllzUTBGQmQwSXNVVUZCZUVJc1EwRkJhVU1zVVVGQmFrTXNSVUZCTWtNc1NVRkJNME1zUTBGQlowUXNXVUZCVnp0QlFVTjZSQ3haUVVGUkxFZEJRVklzUTBGQldTeHpRa0ZCV2p0QlFVTkVMRWRCUmtRc1JVRkZSeXhMUVVaSUxFTkJSVk1zV1VGQlZ6dEJRVU5zUWl4WlFVRlJMRWRCUVZJc1EwRkJXU3h6UWtGQldqdEJRVU5FTEVkQlNrUTdRVUZOU0N4RFFWUkVPMEZCVlVFN096dEJRekZuUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJJaXdpWm1sc1pTSTZJbWRsYm1WeVlYUmxaQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQnlLR1VzYml4MEtYdG1kVzVqZEdsdmJpQnZLR2tzWmlsN2FXWW9JVzViYVYwcGUybG1LQ0ZsVzJsZEtYdDJZWElnWXoxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnlaWEYxYVhKbEppWnlaWEYxYVhKbE8ybG1LQ0ZtSmlaaktYSmxkSFZ5YmlCaktHa3NJVEFwTzJsbUtIVXBjbVYwZFhKdUlIVW9hU3doTUNrN2RtRnlJR0U5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXRwSzF3aUoxd2lLVHQwYUhKdmR5QmhMbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNZWDEyWVhJZ2NEMXVXMmxkUFh0bGVIQnZjblJ6T250OWZUdGxXMmxkV3pCZExtTmhiR3dvY0M1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0hJcGUzWmhjaUJ1UFdWYmFWMWJNVjFiY2wwN2NtVjBkWEp1SUc4b2JueDhjaWw5TEhBc2NDNWxlSEJ2Y25SekxISXNaU3h1TEhRcGZYSmxkSFZ5YmlCdVcybGRMbVY0Y0c5eWRITjlabTl5S0haaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVVzYVQwd08yazhkQzVzWlc1bmRHZzdhU3NyS1c4b2RGdHBYU2s3Y21WMGRYSnVJRzk5Y21WMGRYSnVJSEo5S1NncElpd2lkbUZ5SUdsa1lpQTlJSEpsY1hWcGNtVW9KMmxrWWljcE8xeHlYRzR2S2lwY2NseHVJQ29nUTI5dGJXOXVJR1JoZEdGaVlYTmxJR2hsYkhCbGNpQm1kVzVqZEdsdmJuTXVYSEpjYmlBcUwxeHlYRzVqYkdGemN5Qk5ZV2x1UkVKSVpXeHdaWElnZTF4eVhHNGdJSE4wWVhScFl5QnZjR1Z1UkdGMFlXSmhjMlVvS1NCN1hISmNiaUFnSUNBdkx5QkpaaUIwYUdVZ1luSnZkM05sY2lCa2IyVnpiaWQwSUhOMWNIQnZjblFnYzJWeWRtbGpaU0IzYjNKclpYSXNYSEpjYmlBZ0lDQXZMeUIzWlNCa2IyNG5kQ0JqWVhKbElHRmliM1YwSUdoaGRtbHVaeUJoSUdSaGRHRmlZWE5sWEhKY2JpQWdJQ0JwWmlBb0lXNWhkbWxuWVhSdmNpNXpaWEoyYVdObFYyOXlhMlZ5S1NCN1hISmNiaUFnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0JjY2x4dUlDQWdJSEpsZEhWeWJpQnBaR0l1YjNCbGJpZ25jbVZ6ZEdGMWNtRnVkQ2NzSURJc0lHWjFibU4wYVc5dUtIVndaM0poWkdWRVlpa2dlMXh5WEc0Z0lDQWdJQ0J6ZDJsMFkyZ2dLSFZ3WjNKaFpHVkVZaTV2YkdSV1pYSnphVzl1S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JqWVhObElEQTZYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzUmhkWEpoYm5SelUzUnZjbVVnUFNCMWNHZHlZV1JsUkdJdVkzSmxZWFJsVDJKcVpXTjBVM1J2Y21Vb0ozSmxjM1JoZFhKaGJuUnpKeXdnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd0bGVWQmhkR2c2SUNkcFpDZGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1JoZFhKaGJuUnpVM1J2Y21VdVkzSmxZWFJsU1c1a1pYZ29KMko1TFdSaGRHVW5MQ0FuZEdsdFpTY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0F4T2x4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NtVjJhV1YzYzFOMGIzSmxJRDBnZFhCbmNtRmtaVVJpTG1OeVpXRjBaVTlpYW1WamRGTjBiM0psS0NkeVpYWnBaWGR6Snl3Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHdGxlVkJoZEdnNklDZHBaQ2RjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZG1sbGQzTlRkRzl5WlM1amNtVmhkR1ZKYm1SbGVDZ25jbVZ6WVhWeVlXNTBKeXdnSjNKbGMzUmhkWEpoYm5SZmFXUW5LVHRjY2x4dVhISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQjlYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dSR0YwWVdKaGMyVWdWVkpNTGx4eVhHNGdJQ0FxSUVOb1lXNW5aU0IwYUdseklIUnZJSEpsYzNSaGRYSmhiblJ6TG1wemIyNGdabWxzWlNCc2IyTmhkR2x2YmlCdmJpQjViM1Z5SUhObGNuWmxjaTVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1oyVjBJRVJCVkVGQ1FWTkZYMVZTVENncElIdGNjbHh1SUNBZ0lHTnZibk4wSUhCdmNuUWdQU0F4TXpNM0lDOHZJRU5vWVc1blpTQjBhR2x6SUhSdklIbHZkWElnYzJWeWRtVnlJSEJ2Y25SY2NseHVJQ0FnSUhKbGRIVnliaUJnYUhSMGNEb3ZMMnh2WTJGc2FHOXpkRG9rZTNCdmNuUjlMM0psYzNSaGRYSmhiblJ6WUR0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFWmxkR05vSUdGc2JDQnlaWE4wWVhWeVlXNTBjeTVjY2x4dUlDQWdLaTljY2x4dUlDQmNjbHh1SUNCemRHRjBhV01nWm1WMFkyaFNaWE4wWVhWeVlXNTBjeWhqWVd4c1ltRmpheWtnZTF4eVhHNGdJQ0FnSUNBZ1hISmNiaUFnSUNCTllXbHVSRUpJWld4d1pYSXVjMmh2ZDBOaFkyaGxaRkpsYzNSaGRYSmhiblJ6S0dOaGJHeGlZV05yS1M1MGFHVnVLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdabVYwWTJnb1RXRnBia1JDU0dWc2NHVnlMa1JCVkVGQ1FWTkZYMVZTVENrdWRHaGxiaWh5WlhOd2IyNXpaU0E5UGlCeVpYTndiMjV6WlM1cWMyOXVLQ2twWEhKY2JpQWdJQ0FnSUM1MGFHVnVLSEpsYzNSaGRYSmhiblJ6SUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JOWVdsdVJFSklaV3h3WlhJdWIzQmxia1JoZEdGaVlYTmxLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaGtZaWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGa1lpa2djbVYwZFhKdU8xeHlYRzRnSUNBZ0lDQmNjbHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQjBlQ0E5SUdSaUxuUnlZVzV6WVdOMGFXOXVLQ2R5WlhOMFlYVnlZVzUwY3ljc0lDZHlaV0ZrZDNKcGRHVW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ6ZEc5eVpTQTlJSFI0TG05aWFtVmpkRk4wYjNKbEtDZHlaWE4wWVhWeVlXNTBjeWNwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6ZEdGMWNtRnVkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaWh5WlhOMFlYVnlZVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGIzSmxMbkIxZENoeVpYTjBZWFZ5WVc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCallXeHNZbUZqYXlodWRXeHNMQ0J5WlhOMFlYVnlZVzUwY3lrN1hISmNiaUFnSUNBZ0lIMHBYSEpjYmlBZ0lDQWdJQzVqWVhSamFDaGxJRDArSUdOaGJHeGlZV05yS0dVc0lHNTFiR3dwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzRnSUZ4eVhHNGdJSDBnWEhKY2JpQWdJQzhxS2x4eVhHNGdJQ0FxSUVabGRHTm9JR0ZzYkNCallXTm9aV1FnY21WemRHRjFjbUZ1ZEhNdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSE5vYjNkRFlXTm9aV1JTWlhOMFlYVnlZVzUwY3loallXeHNZbUZqYXlrZ2UxeHlYRzRnSUZ4eVhHNGdJQ0FnY21WMGRYSnVJRTFoYVc1RVFraGxiSEJsY2k1dmNHVnVSR0YwWVdKaGMyVW9LUzUwYUdWdUtHWjFibU4wYVc5dUtHUmlLU0I3WEhKY2JpQWdJQ0FnSUdsbUlDZ2haR0lnS1NCeVpYUjFjbTQ3WEhKY2JpQWdYSEpjYmlBZ0lDQWdJSFpoY2lCcGJtUmxlQ0E5SUdSaUxuUnlZVzV6WVdOMGFXOXVLQ2R5WlhOMFlYVnlZVzUwY3ljcFhISmNiaUFnSUNBZ0lDQWdMbTlpYW1WamRGTjBiM0psS0NkeVpYTjBZWFZ5WVc1MGN5Y3BPMXh5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdhVzVrWlhndVoyVjBRV3hzS0NrdWRHaGxiaWdvY21WemRHRjFjbUZ1ZEhNcElEMCtJSHRjY2x4dUlDQWdJQ0FnSUNCallXeHNZbUZqYXlodWRXeHNMQ0J5WlhOMFlYVnlZVzUwY3lrN1hISmNiaUFnSUNBZ0lDQWdYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlR0Y2NseHVJQ0JjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJHWlhSamFDQnlaWE4wWVhWeVlXNTBjeUJpZVNCaElHTjFhWE5wYm1VZ2RIbHdaU0IzYVhSb0lIQnliM0JsY2lCbGNuSnZjaUJvWVc1a2JHbHVaeTVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1ptVjBZMmhTWlhOMFlYVnlZVzUwUW5sRGRXbHphVzVsS0dOMWFYTnBibVVzSUdOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBdkx5QkdaWFJqYUNCaGJHd2djbVZ6ZEdGMWNtRnVkSE1nSUhkcGRHZ2djSEp2Y0dWeUlHVnljbTl5SUdoaGJtUnNhVzVuWEhKY2JpQWdJQ0JOWVdsdVJFSklaV3h3WlhJdVptVjBZMmhTWlhOMFlYVnlZVzUwY3lnb1pYSnliM0lzSUhKbGMzUmhkWEpoYm5SektTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJLR1Z5Y205eUxDQnVkV3hzS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJHYVd4MFpYSWdjbVZ6ZEdGMWNtRnVkSE1nZEc4Z2FHRjJaU0J2Ym14NUlHZHBkbVZ1SUdOMWFYTnBibVVnZEhsd1pWeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjM1ZzZEhNZ1BTQnlaWE4wWVhWeVlXNTBjeTVtYVd4MFpYSW9jaUE5UGlCeUxtTjFhWE5wYm1WZmRIbHdaU0E5UFNCamRXbHphVzVsS1R0Y2NseHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5aHVkV3hzTENCeVpYTjFiSFJ6S1R0Y2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJHWlhSamFDQnlaWE4wWVhWeVlXNTBjeUJpZVNCaElHNWxhV2RvWW05eWFHOXZaQ0IzYVhSb0lIQnliM0JsY2lCbGNuSnZjaUJvWVc1a2JHbHVaeTVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1ptVjBZMmhTWlhOMFlYVnlZVzUwUW5sT1pXbG5hR0p2Y21odmIyUW9ibVZwWjJoaWIzSm9iMjlrTENCallXeHNZbUZqYXlrZ2UxeHlYRzRnSUNBZ0x5OGdSbVYwWTJnZ1lXeHNJSEpsYzNSaGRYSmhiblJ6WEhKY2JpQWdJQ0JOWVdsdVJFSklaV3h3WlhJdVptVjBZMmhTWlhOMFlYVnlZVzUwY3lnb1pYSnliM0lzSUhKbGMzUmhkWEpoYm5SektTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJLR1Z5Y205eUxDQnVkV3hzS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJHYVd4MFpYSWdjbVZ6ZEdGMWNtRnVkSE1nZEc4Z2FHRjJaU0J2Ym14NUlHZHBkbVZ1SUc1bGFXZG9ZbTl5YUc5dlpGeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjM1ZzZEhNZ1BTQnlaWE4wWVhWeVlXNTBjeTVtYVd4MFpYSW9jaUE5UGlCeUxtNWxhV2RvWW05eWFHOXZaQ0E5UFNCdVpXbG5hR0p2Y21odmIyUXBPMXh5WEc0Z0lDQWdJQ0FnSUdOaGJHeGlZV05yS0c1MWJHd3NJSEpsYzNWc2RITXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFWmxkR05vSUhKbGMzUmhkWEpoYm5SeklHSjVJR0VnWTNWcGMybHVaU0JoYm1RZ1lTQnVaV2xuYUdKdmNtaHZiMlFnZDJsMGFDQndjbTl3WlhJZ1pYSnliM0lnYUdGdVpHeHBibWN1WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHWmxkR05vVW1WemRHRjFjbUZ1ZEVKNVEzVnBjMmx1WlVGdVpFNWxhV2RvWW05eWFHOXZaQ2hqZFdsemFXNWxMQ0J1WldsbmFHSnZjbWh2YjJRc0lHTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQXZMeUJHWlhSamFDQmhiR3dnY21WemRHRjFjbUZ1ZEhOY2NseHVJQ0FnSUUxaGFXNUVRa2hsYkhCbGNpNW1aWFJqYUZKbGMzUmhkWEpoYm5SektDaGxjbkp2Y2l3Z2NtVnpkR0YxY21GdWRITXBJRDArSUh0Y2NseHVJQ0FnSUNBZ2FXWWdLR1Z5Y205eUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvWlhKeWIzSXNJRzUxYkd3cE8xeHlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCeVpYTjFiSFJ6SUQwZ2NtVnpkR0YxY21GdWRITmNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1kzVnBjMmx1WlNBaFBTQW5ZV3hzSnlrZ2V5QXZMeUJtYVd4MFpYSWdZbmtnWTNWcGMybHVaVnh5WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpkV3gwY3lBOUlISmxjM1ZzZEhNdVptbHNkR1Z5S0hJZ1BUNGdjaTVqZFdsemFXNWxYM1I1Y0dVZ1BUMGdZM1ZwYzJsdVpTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2h1WldsbmFHSnZjbWh2YjJRZ0lUMGdKMkZzYkNjcElIc2dMeThnWm1sc2RHVnlJR0o1SUc1bGFXZG9ZbTl5YUc5dlpGeHlYRzRnSUNBZ0lDQWdJQ0FnY21WemRXeDBjeUE5SUhKbGMzVnNkSE11Wm1sc2RHVnlLSElnUFQ0Z2NpNXVaV2xuYUdKdmNtaHZiMlFnUFQwZ2JtVnBaMmhpYjNKb2IyOWtLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdZMkZzYkdKaFkyc29iblZzYkN3Z2NtVnpkV3gwY3lrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nUm1WMFkyZ2dZV3hzSUc1bGFXZG9ZbTl5YUc5dlpITWdkMmwwYUNCd2NtOXdaWElnWlhKeWIzSWdhR0Z1Wkd4cGJtY3VYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdabGRHTm9UbVZwWjJoaWIzSm9iMjlrY3loallXeHNZbUZqYXlrZ2UxeHlYRzRnSUNBZ0x5OGdSbVYwWTJnZ1lXeHNJSEpsYzNSaGRYSmhiblJ6WEhKY2JpQWdJQ0JOWVdsdVJFSklaV3h3WlhJdVptVjBZMmhTWlhOMFlYVnlZVzUwY3lnb1pYSnliM0lzSUhKbGMzUmhkWEpoYm5SektTQTlQaUI3WEhKY2JpQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJLR1Z5Y205eUxDQnVkV3hzS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUJIWlhRZ1lXeHNJRzVsYVdkb1ltOXlhRzl2WkhNZ1puSnZiU0JoYkd3Z2NtVnpkR0YxY21GdWRITmNjbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQnVaV2xuYUdKdmNtaHZiMlJ6SUQwZ2NtVnpkR0YxY21GdWRITXViV0Z3S0NoMkxDQnBLU0E5UGlCeVpYTjBZWFZ5WVc1MGMxdHBYUzV1WldsbmFHSnZjbWh2YjJRcFhISmNiaUFnSUNBZ0lDQWdMeThnVW1WdGIzWmxJR1IxY0d4cFkyRjBaWE1nWm5KdmJTQnVaV2xuYUdKdmNtaHZiMlJ6WEhKY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZFc1cGNYVmxUbVZwWjJoaWIzSm9iMjlrY3lBOUlHNWxhV2RvWW05eWFHOXZaSE11Wm1sc2RHVnlLQ2gyTENCcEtTQTlQaUJ1WldsbmFHSnZjbWh2YjJSekxtbHVaR1Y0VDJZb2Rpa2dQVDBnYVNsY2NseHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5aHVkV3hzTENCMWJtbHhkV1ZPWldsbmFHSnZjbWh2YjJSektUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU2s3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCR1pYUmphQ0JoYkd3Z1kzVnBjMmx1WlhNZ2QybDBhQ0J3Y205d1pYSWdaWEp5YjNJZ2FHRnVaR3hwYm1jdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR1psZEdOb1EzVnBjMmx1WlhNb1kyRnNiR0poWTJzcElIdGNjbHh1SUNBZ0lDOHZJRVpsZEdOb0lHRnNiQ0J5WlhOMFlYVnlZVzUwYzF4eVhHNGdJQ0FnVFdGcGJrUkNTR1ZzY0dWeUxtWmxkR05vVW1WemRHRjFjbUZ1ZEhNb0tHVnljbTl5TENCeVpYTjBZWFZ5WVc1MGN5a2dQVDRnZTF4eVhHNGdJQ0FnSUNCcFppQW9aWEp5YjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWhsY25KdmNpd2diblZzYkNrN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdMeThnUjJWMElHRnNiQ0JqZFdsemFXNWxjeUJtY205dElHRnNiQ0J5WlhOMFlYVnlZVzUwYzF4eVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOMWFYTnBibVZ6SUQwZ2NtVnpkR0YxY21GdWRITXViV0Z3S0NoMkxDQnBLU0E5UGlCeVpYTjBZWFZ5WVc1MGMxdHBYUzVqZFdsemFXNWxYM1I1Y0dVcFhISmNiaUFnSUNBZ0lDQWdMeThnVW1WdGIzWmxJR1IxY0d4cFkyRjBaWE1nWm5KdmJTQmpkV2x6YVc1bGMxeHlYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnVhWEYxWlVOMWFYTnBibVZ6SUQwZ1kzVnBjMmx1WlhNdVptbHNkR1Z5S0NoMkxDQnBLU0E5UGlCamRXbHphVzVsY3k1cGJtUmxlRTltS0hZcElEMDlJR2twWEhKY2JpQWdJQ0FnSUNBZ1kyRnNiR0poWTJzb2JuVnNiQ3dnZFc1cGNYVmxRM1ZwYzJsdVpYTXBPMXh5WEc0Z0lDQWdJQ0I5WEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxjM1JoZFhKaGJuUWdjR0ZuWlNCVlVrd3VYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUhWeWJFWnZjbEpsYzNSaGRYSmhiblFvY21WemRHRjFjbUZ1ZENrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNoZ0xpOXlaWE4wWVhWeVlXNTBMbWgwYld3L2FXUTlKSHR5WlhOMFlYVnlZVzUwTG1sa2ZXQXBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WemRHRjFjbUZ1ZENCcGJXRm5aU0JWVWt3dVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR2x0WVdkbFZYSnNSbTl5VW1WemRHRjFjbUZ1ZENoeVpYTjBZWFZ5WVc1MElDd2djMmw2WlNrZ2UxeHlYRzRnSUNBZ2FXWW9jbVZ6ZEdGMWNtRnVkQzV3YUc5MGIyZHlZWEJvS1h0Y2NseHVJQ0FnSUNBZ2MzZHBkR05vS0hOcGVtVXBJSHRjY2x4dUlDQWdJQ0FnSUNCallYTmxJRndpZUhOY0lqcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHQXZhVzFuTHlSN2NtVnpkR0YxY21GdWRDNXdhRzkwYjJkeVlYQm9mVjgxTlRJdWQyVmljR0FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0JqWVhObElGd2ljMjFjSWpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0dBdmFXMW5MeVI3Y21WemRHRjFjbUZ1ZEM1d2FHOTBiMmR5WVhCb2ZWODJOVE11ZDJWaWNHQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQmpZWE5sSUZ3aWJXUmNJanBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdLR0F2YVcxbkx5UjdjbVZ6ZEdGMWNtRnVkQzV3YUc5MGIyZHlZWEJvZlY4M05USXVkMlZpY0dBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnSUNCallYTmxJRndpYkdkY0lqcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHQXZhVzFuTHlSN2NtVnpkR0YxY21GdWRDNXdhRzkwYjJkeVlYQm9mVjg0TURBdWQyVmljR0FwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQW9ZQzlwYldjdkpIdHlaWE4wWVhWeVlXNTBMbkJvYjNSdlozSmhjR2g5WHpVMU1pNTNaV0p3WUNrN1hISmNiaUFnSUNBZ0lIMWNjbHh1SUNBZ0lIMGdaV3h6Wlh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tHQWpZQ2s3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JjY2x4dUlDQjlYSEpjYmlBZ1hISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRkpsYzNSaGRYSmhiblFnYm1GdFpTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYm1GdFpVWnZjbEpsYzNSaGRYSmhiblFvY21WemRHRjFjbUZ1ZENrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUNoZ0pIdHlaWE4wWVhWeVlXNTBMbTVoYldWOVlDazdYSEpjYmlBZ2ZWeHlYRzRnSUM4cUtseHlYRzRnSUNBcUlFMWhjQ0J0WVhKclpYSWdabTl5SUdFZ2NtVnpkR0YxY21GdWRDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYldGd1RXRnlhMlZ5Um05eVVtVnpkR0YxY21GdWRDaHlaWE4wWVhWeVlXNTBMQ0J0WVhBcElIdGNjbHh1SUNBZ0lHTnZibk4wSUcxaGNtdGxjaUE5SUc1bGR5Qm5iMjluYkdVdWJXRndjeTVOWVhKclpYSW9lMXh5WEc0Z0lDQWdJQ0J3YjNOcGRHbHZiam9nY21WemRHRjFjbUZ1ZEM1c1lYUnNibWNzWEhKY2JpQWdJQ0FnSUhScGRHeGxPaUJ5WlhOMFlYVnlZVzUwTG01aGJXVXNYSEpjYmlBZ0lDQWdJSFZ5YkRvZ1RXRnBia1JDU0dWc2NHVnlMblZ5YkVadmNsSmxjM1JoZFhKaGJuUW9jbVZ6ZEdGMWNtRnVkQ2tzWEhKY2JpQWdJQ0FnSUcxaGNEb2diV0Z3TEZ4eVhHNGdJQ0FnSUNCaGJtbHRZWFJwYjI0NklHZHZiMmRzWlM1dFlYQnpMa0Z1YVcxaGRHbHZiaTVFVWs5UWZWeHlYRzRnSUNBZ0tUdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdFlYSnJaWEk3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6ZEdGMGFXTWdkWEJrWVhSbFJtRjJiM0pwZEdWVGRHRjBkWE1vY21WemRHRjFjbUZ1ZEVsa0xDQnBjMFpoZG05eWFYUmxLU0I3WEhKY2JpQWdJQ0JtWlhSamFDaGdhSFIwY0RvdkwyeHZZMkZzYUc5emREb3hNek0zTDNKbGMzUmhkWEpoYm5Sekx5UjdjbVZ6ZEdGMWNtRnVkRWxrZlM4L2FYTmZabUYyYjNKcGRHVTlKSHRwYzBaaGRtOXlhWFJsZldBZ0xIdGNjbHh1SUNBZ0lDQWdiV1YwYUc5a09pQW5VRlZVSjF4eVhHNGdJQ0FnZlNsY2NseHVJQ0FnSUM1MGFHVnVLQ2dwSUQwK0lIdGNjbHh1SUNBZ0lDQWdUV0ZwYmtSQ1NHVnNjR1Z5TG05d1pXNUVZWFJoWW1GelpTZ3BYSEpjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9aR0lnUFQ0Z2UxeHlYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkSGdnUFNCa1lpNTBjbUZ1YzJGamRHbHZiaWduY21WemRHRjFjbUZ1ZEhNbklDd2dKM0psWVdSM2NtbDBaU2NwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpkR0YxY21GdWMxTjBiM0psSUQwZ2RIZ3ViMkpxWldOMFUzUnZjbVVvSjNKbGMzUmhkWEpoYm5Sekp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCeVpYTjBZWFZ5WVc1elUzUnZjbVV1WjJWMEtISmxjM1JoZFhKaGJuUkpaQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdMblJvWlc0b2NtVnpkR0YxY21GdWRDQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRHRjFjbUZ1ZEM1cGMxOW1ZWFp2Y21sMFpTQTlJR2x6Um1GMmIzSnBkR1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRHRjFjbUZ1YzFOMGIzSmxMbkIxZENoeVpYTjBZWFZ5WVc1MEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQWdJQ0FnZlNrN1hISmNiaUFnSUNCOUtWeHlYRzRnSUgxY2NseHVJQ0JjY2x4dWZWeHlYRzVjYm14bGRDQnlaWE4wWVhWeVlXNTBjeXhjY2x4dUlDQnVaV2xuYUdKdmNtaHZiMlJ6TEZ4eVhHNGdJR04xYVhOcGJtVnpYSEpjYm5aaGNpQnRZWEJjY2x4dWQybHVaRzkzTG0xaGNtdGxjbk1nUFNCYlhWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFWmxkR05vSUc1bGFXZG9ZbTl5YUc5dlpITWdZVzVrSUdOMWFYTnBibVZ6SUdGeklITnZiMjRnWVhNZ2RHaGxJSEJoWjJVZ2FYTWdiRzloWkdWa0xseHlYRzRnS2k5Y2NseHVaRzlqZFcxbGJuUXVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25SRTlOUTI5dWRHVnVkRXh2WVdSbFpDY3NJQ2hsZG1WdWRDa2dQVDRnZTF4eVhHNGdJR1psZEdOb1RtVnBaMmhpYjNKb2IyOWtjeWdwTzF4eVhHNGdJR1psZEdOb1EzVnBjMmx1WlhNb0tUdGNjbHh1ZlNrN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1JtVjBZMmdnWVd4c0lHNWxhV2RvWW05eWFHOXZaSE1nWVc1a0lITmxkQ0IwYUdWcGNpQklWRTFNTGx4eVhHNGdLaTljY2x4dVkyOXVjM1FnWm1WMFkyaE9aV2xuYUdKdmNtaHZiMlJ6SUQwZ0tDa2dQVDRnZTF4eVhHNGdJRTFoYVc1RVFraGxiSEJsY2k1bVpYUmphRTVsYVdkb1ltOXlhRzl2WkhNb0tHVnljbTl5TENCdVpXbG5hR0p2Y21odmIyUnpLU0E5UGlCN1hISmNiaUFnSUNCcFppQW9aWEp5YjNJcElIc2dMeThnUjI5MElHRnVJR1Z5Y205eVhISmNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeWIzSXBPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdjMlZzWmk1dVpXbG5hR0p2Y21odmIyUnpJRDBnYm1WcFoyaGliM0pvYjI5a2N6dGNjbHh1SUNBZ0lDQWdabWxzYkU1bGFXZG9ZbTl5YUc5dlpITklWRTFNS0NrN1hISmNiaUFnSUNCOVhISmNiaUFnZlNrN1hISmNibjFjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJUWlhRZ2JtVnBaMmhpYjNKb2IyOWtjeUJJVkUxTUxseHlYRzRnS2k5Y2NseHVZMjl1YzNRZ1ptbHNiRTVsYVdkb1ltOXlhRzl2WkhOSVZFMU1JRDBnS0c1bGFXZG9ZbTl5YUc5dlpITWdQU0J6Wld4bUxtNWxhV2RvWW05eWFHOXZaSE1wSUQwK0lIdGNjbHh1SUNCamIyNXpkQ0J6Wld4bFkzUWdQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25ibVZwWjJoaWIzSm9iMjlrY3kxelpXeGxZM1FuS1R0Y2NseHVJQ0J1WldsbmFHSnZjbWh2YjJSekxtWnZja1ZoWTJnb2JtVnBaMmhpYjNKb2IyOWtJRDArSUh0Y2NseHVJQ0FnSUdOdmJuTjBJRzl3ZEdsdmJpQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyOXdkR2x2YmljcE8xeHlYRzRnSUNBZ2IzQjBhVzl1TG1sdWJtVnlTRlJOVENBOUlHNWxhV2RvWW05eWFHOXZaRHRjY2x4dUlDQWdJRzl3ZEdsdmJpNTJZV3gxWlNBOUlHNWxhV2RvWW05eWFHOXZaRHRjY2x4dUlDQWdJRzl3ZEdsdmJpNXpaWFJCZEhSeWFXSjFkR1VvWENKeWIyeGxYQ0lzSUZ3aWJXVnVkV2wwWlcxY0lpazdYSEpjYmlBZ0lDQmNjbHh1SUNBZ0lITmxiR1ZqZEM1aGNIQmxibVFvYjNCMGFXOXVLVHRjY2x4dUlDQjlLVHRjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFWmxkR05vSUdGc2JDQmpkV2x6YVc1bGN5QmhibVFnYzJWMElIUm9aV2x5SUVoVVRVd3VYSEpjYmlBcUwxeHlYRzVqYjI1emRDQm1aWFJqYUVOMWFYTnBibVZ6SUQwZ0tDa2dQVDRnZTF4eVhHNGdJRTFoYVc1RVFraGxiSEJsY2k1bVpYUmphRU4xYVhOcGJtVnpLQ2hsY25KdmNpd2dZM1ZwYzJsdVpYTXBJRDArSUh0Y2NseHVJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2V5QXZMeUJIYjNRZ1lXNGdaWEp5YjNJaFhISmNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWlhKeWIzSXBPMXh5WEc0Z0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdjMlZzWmk1amRXbHphVzVsY3lBOUlHTjFhWE5wYm1Wek8xeHlYRzRnSUNBZ0lDQm1hV3hzUTNWcGMybHVaWE5JVkUxTUtDazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ2ZTazdYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCVFpYUWdZM1ZwYzJsdVpYTWdTRlJOVEM1Y2NseHVJQ292WEhKY2JtTnZibk4wSUdacGJHeERkV2x6YVc1bGMwaFVUVXdnUFNBb1kzVnBjMmx1WlhNZ1BTQnpaV3htTG1OMWFYTnBibVZ6S1NBOVBpQjdYSEpjYmlBZ1kyOXVjM1FnYzJWc1pXTjBJRDBnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9KMk4xYVhOcGJtVnpMWE5sYkdWamRDY3BPMXh5WEc1Y2NseHVJQ0JqZFdsemFXNWxjeTVtYjNKRllXTm9LR04xYVhOcGJtVWdQVDRnZTF4eVhHNGdJQ0FnWTI5dWMzUWdiM0IwYVc5dUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmIzQjBhVzl1SnlrN1hISmNiaUFnSUNCdmNIUnBiMjR1YVc1dVpYSklWRTFNSUQwZ1kzVnBjMmx1WlR0Y2NseHVJQ0FnSUc5d2RHbHZiaTV6WlhSQmRIUnlhV0oxZEdVb1hDSnliMnhsWENJc1hDSnRaVzUxYVhSbGJWd2lLVHRjY2x4dUlDQWdJRzl3ZEdsdmJpNTJZV3gxWlNBOUlHTjFhWE5wYm1VN1hISmNiaUFnSUNCelpXeGxZM1F1WVhCd1pXNWtLRzl3ZEdsdmJpazdYSEpjYmlBZ2ZTazdYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCSmJtbDBhV0ZzYVhwbElFZHZiMmRzWlNCdFlYQXNJR05oYkd4bFpDQm1jbTl0SUVoVVRVd3VYSEpjYmlBcUwxeHlYRzUzYVc1a2IzY3VhVzVwZEUxaGNDQTlJQ2dwSUQwK0lIdGNjbHh1SUNCamIyNXpkQ0J0WVhCZlkyOXVkR0ZwYm1WeUlEMGdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb1hDSnRZWEF0WTI5dWRHRnBibVZ5WENJcE8xeHlYRzRnSUdOdmJuTjBJSFJ2WjJkc1pWOXRZWEFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RpZFhSMGIyNG5LVHRjY2x4dUlDQjBiMmRuYkdWZmJXRndMbWx1Ym1WeVNGUk5UQ0E5SUZ3aVUyaHZkeUJOWVhCY0lqdGNjbHh1SUNCMGIyZG5iR1ZmYldGd0xtbGtJRDBnWENKMGIyZG5iR1ZmYldGd1hDSTdYSEpjYmlBZ2RHOW5aMnhsWDIxaGNDNXpaWFJCZEhSeWFXSjFkR1VvWENKaGNtbGhMV3hoWW1Wc1hDSXNJRndpYzJoaGR5QnRZWEJjSWlrN1hISmNiaUFnZEc5bloyeGxYMjFoY0M1dmJtTnNhV05yUFNCbWRXNWpkR2x2YmlncElIdGNjbHh1SUNBZ0lHbG1JQ2hrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDZ25iV0Z3SnlrdWMzUjViR1V1WkdsemNHeGhlU0E5UFQwZ0oyNXZibVVuS1NBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0I3SUNBZ0lDQWdJQ0JjY2x4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duYldGd0p5a3VjM1I1YkdVdVpHbHpjR3hoZVNBOUlDZGliRzlqYXljN1hISmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0ozUnZaMmRzWlY5dFlYQW5LUzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKMjV2Ym1Vbk95QWdJQ0JjY2x4dUlDQWdJQ0FnZlNCY2NseHVJQ0I5SUZ4eVhHNGdJRzFoY0Y5amIyNTBZV2x1WlhJdVlYQndaVzVrUTJocGJHUW9kRzluWjJ4bFgyMWhjQ2s3WEhKY2JpQWdiR1YwSUd4dll5QTlJSHRjY2x4dUlDQWdJR3hoZERvZ05EQXVOekl5TWpFMkxGeHlYRzRnSUNBZ2JHNW5PaUF0TnpNdU9UZzNOVEF4WEhKY2JpQWdmVHRjY2x4dUlDQnpaV3htTG0xaGNDQTlJRzVsZHlCbmIyOW5iR1V1YldGd2N5NU5ZWEFvWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEVKNVNXUW9KMjFoY0NjcExDQjdYSEpjYmlBZ0lDQjZiMjl0T2lBeE1peGNjbHh1SUNBZ0lHTmxiblJsY2pvZ2JHOWpMRnh5WEc0Z0lDQWdjMk55YjJ4c2QyaGxaV3c2SUdaaGJITmxYSEpjYmlBZ2ZTazdYSEpjYmlBZ2RYQmtZWFJsVW1WemRHRjFjbUZ1ZEhNb0tUdGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSUZWd1pHRjBaU0J3WVdkbElHRnVaQ0J0WVhBZ1ptOXlJR04xY25KbGJuUWdjbVZ6ZEdGMWNtRnVkSE11WEhKY2JpQXFMMXh5WEc1elpXeG1MblZ3WkdGMFpWSmxjM1JoZFhKaGJuUnpJRDBnS0NrZ1BUNGdlMXh5WEc0Z0lHTnZibk4wSUdOVFpXeGxZM1FnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duWTNWcGMybHVaWE10YzJWc1pXTjBKeWs3WEhKY2JpQWdZMjl1YzNRZ2JsTmxiR1ZqZENBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUkNlVWxrS0NkdVpXbG5hR0p2Y21odmIyUnpMWE5sYkdWamRDY3BPMXh5WEc1Y2NseHVJQ0JqYjI1emRDQmpTVzVrWlhnZ1BTQmpVMlZzWldOMExuTmxiR1ZqZEdWa1NXNWtaWGc3WEhKY2JpQWdZMjl1YzNRZ2JrbHVaR1Y0SUQwZ2JsTmxiR1ZqZEM1elpXeGxZM1JsWkVsdVpHVjRPMXh5WEc1Y2NseHVJQ0JqYjI1emRDQmpkV2x6YVc1bElEMGdZMU5sYkdWamRGdGpTVzVrWlhoZExuWmhiSFZsTzF4eVhHNGdJR052Ym5OMElHNWxhV2RvWW05eWFHOXZaQ0E5SUc1VFpXeGxZM1JiYmtsdVpHVjRYUzUyWVd4MVpUdGNjbHh1WEhKY2JpQWdUV0ZwYmtSQ1NHVnNjR1Z5TG1abGRHTm9VbVZ6ZEdGMWNtRnVkRUo1UTNWcGMybHVaVUZ1WkU1bGFXZG9ZbTl5YUc5dlpDaGpkV2x6YVc1bExDQnVaV2xuYUdKdmNtaHZiMlFzSUNobGNuSnZjaXdnY21WemRHRjFjbUZ1ZEhNcElEMCtJSHRjY2x4dUlDQWdJR2xtSUNobGNuSnZjaWtnZXlBdkx5QkhiM1FnWVc0Z1pYSnliM0loWEhKY2JpQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9aWEp5YjNJcE8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ2NtVnpaWFJTWlhOMFlYVnlZVzUwY3loeVpYTjBZWFZ5WVc1MGN5azdYSEpjYmlBZ0lDQWdJR1pwYkd4U1pYTjBZWFZ5WVc1MGMwaFVUVXdvS1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0I5S1Z4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRMnhsWVhJZ1kzVnljbVZ1ZENCeVpYTjBZWFZ5WVc1MGN5d2dkR2hsYVhJZ1NGUk5UQ0JoYm1RZ2NtVnRiM1psSUhSb1pXbHlJRzFoY0NCdFlYSnJaWEp6TGx4eVhHNGdLaTljY2x4dVkyOXVjM1FnY21WelpYUlNaWE4wWVhWeVlXNTBjeUE5SUNoeVpYTjBZWFZ5WVc1MGN5a2dQVDRnZTF4eVhHNGdJQzh2SUZKbGJXOTJaU0JoYkd3Z2NtVnpkR0YxY21GdWRITmNjbHh1SUNCelpXeG1MbkpsYzNSaGRYSmhiblJ6SUQwZ1cxMDdYSEpjYmlBZ1kyOXVjM1FnZFd3Z1BTQmtiMk4xYldWdWRDNW5aWFJGYkdWdFpXNTBRbmxKWkNnbmNtVnpkR0YxY21GdWRITXRiR2x6ZENjcE8xeHlYRzRnSUhWc0xtbHVibVZ5U0ZSTlRDQTlJQ2NuTzF4eVhHNWNjbHh1SUNBdkx5QlNaVzF2ZG1VZ1lXeHNJRzFoY0NCdFlYSnJaWEp6WEhKY2JpQWdjMlZzWmk1dFlYSnJaWEp6TG1admNrVmhZMmdvYlNBOVBpQnRMbk5sZEUxaGNDaHVkV3hzS1NrN1hISmNiaUFnYzJWc1ppNXRZWEpyWlhKeklEMGdXMTA3WEhKY2JpQWdjMlZzWmk1eVpYTjBZWFZ5WVc1MGN5QTlJSEpsYzNSaGRYSmhiblJ6TzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRM0psWVhSbElHRnNiQ0J5WlhOMFlYVnlZVzUwY3lCSVZFMU1JR0Z1WkNCaFpHUWdkR2hsYlNCMGJ5QjBhR1VnZDJWaWNHRm5aUzVjY2x4dUlDb3ZYSEpjYm1OdmJuTjBJR1pwYkd4U1pYTjBZWFZ5WVc1MGMwaFVUVXdnUFNBb2NtVnpkR0YxY21GdWRITWdQU0J6Wld4bUxuSmxjM1JoZFhKaGJuUnpLU0E5UGlCN1hISmNiaUFnWTI5dWMzUWdkV3dnUFNCa2IyTjFiV1Z1ZEM1blpYUkZiR1Z0Wlc1MFFubEpaQ2duY21WemRHRjFjbUZ1ZEhNdGJHbHpkQ2NwTzF4eVhHNGdJSEpsYzNSaGRYSmhiblJ6TG1admNrVmhZMmdvY21WemRHRjFjbUZ1ZENBOVBpQjdYSEpjYmlBZ0lDQjFiQzVoY0hCbGJtUW9ZM0psWVhSbFVtVnpkR0YxY21GdWRFaFVUVXdvY21WemRHRjFjbUZ1ZENrcE8xeHlYRzRnSUgwcE8xeHlYRzRnSUdGa1pFMWhjbXRsY25OVWIwMWhjQ2dwTzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRM0psWVhSbElISmxjM1JoZFhKaGJuUWdTRlJOVEM1Y2NseHVJQ292WEhKY2JtTnZibk4wSUdOeVpXRjBaVkpsYzNSaGRYSmhiblJJVkUxTUlEMGdLSEpsYzNSaGRYSmhiblFwSUQwK0lIdGNjbHh1SUNCamIyNXpkQ0JzYVNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJ4cEp5azdYSEpjYmlBZ2JHa3VZMnhoYzNOT1lXMWxJRDBnSjJkeWFXUXRhWFJsYlNjN1hISmNiaUFnWTI5dWMzUWdjR2xqZEhWeVpTQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0ozQnBZM1IxY21VbktUdGNjbHh1SUNCc2FTNWhjSEJsYm1Rb2NHbGpkSFZ5WlNrN1hISmNibHh5WEc0Z0lHTnZibk4wSUhOdmRYSmpaVEVnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2R6YjNWeVkyVW5LVHRjY2x4dUlDQnpiM1Z5WTJVeExtMWxaR2xoSUQwZ1hDSW9iV0Y0TFhkcFpIUm9PaUF6TlRCd2VDbGNJanRjY2x4dUlDQnpiM1Z5WTJVeExuTnlZM05sZENBOUlFMWhhVzVFUWtobGJIQmxjaTVwYldGblpWVnliRVp2Y2xKbGMzUmhkWEpoYm5Rb2NtVnpkR0YxY21GdWRDQXNJQ2R6YlNjcE8xeHlYRzRnSUhCcFkzUjFjbVV1WVhCd1pXNWtLSE52ZFhKalpURXBPMXh5WEc1Y2NseHVJQ0JqYjI1emRDQnBiV0ZuWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJsdFp5Y3BPMXh5WEc0Z0lHbHRZV2RsTG1Oc1lYTnpUbUZ0WlNBOUlDZHlaWE4wWVhWeVlXNTBMV2x0WnljN1hISmNiaUFnYVcxaFoyVXVZV3gwSUQxY0lrRnVJR2x0WVdkbElHOW1YQ0lySUhKbGMzUmhkWEpoYm5RdWJtRnRaU0FyWENJZ1VtVnpkR0YxY21GdWRDQnBiaUJjSWlBcklISmxjM1JoZFhKaGJuUXVibVZwWjJoaWIzSm9iMjlrSUR0Y2NseHVJQ0JqYjI1emRDQmpiMjVtYVdjZ1BTQjdYSEpjYmlBZ0lDQjBhSEpsYzJodmJHUTZJREF1TVZ4eVhHNGdJSDA3WEhKY2JpQWdiR1YwSUc5aWMyVnlkbVZ5TzF4eVhHNGdJR2xtSUNnblNXNTBaWEp6WldOMGFXOXVUMkp6WlhKMlpYSW5JR2x1SUhkcGJtUnZkeWtnZTF4eVhHNGdJQ0FnYjJKelpYSjJaWElnUFNCdVpYY2dTVzUwWlhKelpXTjBhVzl1VDJKelpYSjJaWElvYjI1RGFHRnVaMlVnTENCamIyNW1hV2NwTzF4eVhHNGdJQ0FnYjJKelpYSjJaWEl1YjJKelpYSjJaU2hwYldGblpTazdYSEpjYmlBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEpiblJsY25ObFkzUnBiMjVQWW5ObGNuWmxjaUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEhKY2JpQWdJQ0JzYjJGa1NXMWhaMlVvYVcxaFoyVXBPMXh5WEc0Z0lIMWNjbHh1SUNCamIyNXpkQ0JzYjJGa1NXMWhaMlVnUFNCcGJXRm5aU0E5UGlCN1hISmNiaUFnSUNCcGJXRm5aUzV6Y21NZ1BTQk5ZV2x1UkVKSVpXeHdaWEl1YVcxaFoyVlZjbXhHYjNKU1pYTjBZWFZ5WVc1MEtISmxjM1JoZFhKaGJuUWdMQ0FuYldRbktUdGNjbHh1WEhKY2JpQWdmVnh5WEc0Z0lHWjFibU4wYVc5dUlHOXVRMmhoYm1kbElDaGphR0Z1WjJWeklDd2diMkp6WlhKMlpYSXBJSHRjY2x4dUlDQWdJQ0FnWTJoaGJtZGxjeTVtYjNKRllXTm9LR05vWVc1blpTQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR05vWVc1blpTNXBiblJsY25ObFkzUnBiMjVTWVhScGJ5QStJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJR3h2WVdSSmJXRm5aU2hqYUdGdVoyVXVkR0Z5WjJWMEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUc5aWMyVnlkbVZ5TG5WdWIySnpaWEoyWlNoamFHRnVaMlV1ZEdGeVoyVjBLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lIMHBYSEpjYmlBZ2ZWeHlYRzRnSUhCcFkzUjFjbVV1WVhCd1pXNWtLR2x0WVdkbEtUdGNjbHh1WEhKY2JpQWdZMjl1YzNRZ1ptRjJiM0pwZEdVZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkaWRYUjBiMjRuS1R0Y2NseHVJQ0JtWVhadmNtbDBaUzVwYm01bGNraFVUVXdnUFNBbjRwMmtKenRjY2x4dVhISmNiaUFnWm1GMmIzSnBkR1V1YjI1amJHbGpheUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzRnSUNBZ1kyOXVjM1FnYVhOR1lYWk9iM2NnUFNBaGNtVnpkR0YxY21GdWRDNXBjMTltWVhadmNtbDBaVHRjY2x4dUlDQWdJRTFoYVc1RVFraGxiSEJsY2k1MWNHUmhkR1ZHWVhadmNtbDBaVk4wWVhSMWN5aHlaWE4wWVhWeVlXNTBMbWxrTENCcGMwWmhkazV2ZHlrN1hISmNiaUFnSUNCeVpYTjBZWFZ5WVc1MExtbHpYMlpoZG05eWFYUmxJRDBnSVhKbGMzUmhkWEpoYm5RdWFYTmZabUYyYjNKcGRHVTdYSEpjYmlBZ0lDQnpaWFJHWVhaRmJHVnRaVzUwUTJ4aGMzTW9abUYyYjNKcGRHVWdMQ0J5WlhOMFlYVnlZVzUwTG1selgyWmhkbTl5YVhSbEtUdGNjbHh1SUNCOU8xeHlYRzRnSUhObGRFWmhka1ZzWlcxbGJuUkRiR0Z6Y3lobVlYWnZjbWwwWlNBc0lISmxjM1JoZFhKaGJuUXVhWE5mWm1GMmIzSnBkR1VwTzF4eVhHNWNjbHh1SUNCc2FTNWhjSEJsYm1Rb1ptRjJiM0pwZEdVcE8xeHlYRzVjY2x4dUlDQmpiMjV6ZENCdVlXMWxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25hRE1uS1R0Y2NseHVJQ0J1WVcxbExtbHVibVZ5U0ZSTlRDQTlJSEpsYzNSaGRYSmhiblF1Ym1GdFpUdGNjbHh1SUNCc2FTNWhjSEJsYm1Rb2JtRnRaU2s3WEhKY2JseHlYRzRnSUdOdmJuTjBJRzVsYVdkb1ltOXlhRzl2WkNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNBbktUdGNjbHh1SUNCdVpXbG5hR0p2Y21odmIyUXVhVzV1WlhKSVZFMU1JRDBnY21WemRHRjFjbUZ1ZEM1dVpXbG5hR0p2Y21odmIyUTdYSEpjYmlBZ2JHa3VZWEJ3Wlc1a0tHNWxhV2RvWW05eWFHOXZaQ2s3WEhKY2JseHlYRzRnSUdOdmJuTjBJR0ZrWkhKbGMzTWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHdKeWs3WEhKY2JpQWdZV1JrY21WemN5NXBibTVsY2toVVRVd2dQU0J5WlhOMFlYVnlZVzUwTG1Ga1pISmxjM003WEhKY2JpQWdiR2t1WVhCd1pXNWtLR0ZrWkhKbGMzTXBPMXh5WEc1Y2NseHVJQ0JqYjI1emRDQnRiM0psSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWVNjcE8xeHlYRzRnSUcxdmNtVXVhVzV1WlhKSVZFMU1JRDBnSjFacFpYY2dSR1YwWVdsc2N5YzdJQ0FnSUZ4eVhHNGdJRzF2Y21VdWMyVjBRWFIwY21saWRYUmxLRndpY205c1pWd2lMQ0JjSW1KMWRIUnZibHdpS1RzZ0lGeHlYRzRnSUcxdmNtVXVjMlYwUVhSMGNtbGlkWFJsS0Z3aVlYSnBZUzFzWVdKbGJGd2lMQ0JjSWsxdmNtVWdTVzVtYjNKdFlYUnBiMjRnUVdKdmRYUmNJaXR5WlhOMFlYVnlZVzUwTG01aGJXVXBPMXh5WEc0Z0lHMXZjbVV1YUhKbFppQTlJRTFoYVc1RVFraGxiSEJsY2k1MWNteEdiM0pTWlhOMFlYVnlZVzUwS0hKbGMzUmhkWEpoYm5RcE8xeHlYRzRnSUd4cExtRndjR1Z1WkNodGIzSmxLVnh5WEc0Z0lHeHBMbk5sZEVGMGRISnBZblYwWlNoY0luSnZiR1ZjSWlBc0lGd2lZWEowYVdOc1pWd2lLVHRjY2x4dUlDQnlaWFIxY200Z2JHbGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNCamFHRnVaMlVnWm1GMmIzSnBkR1VnWld4bGJXVnVkQ0JqYkdGemN5QmhablJsY2lCamJHbGpheTVjY2x4dUlDb3ZYSEpjYm1OdmJuTjBJSE5sZEVaaGRrVnNaVzFsYm5SRGJHRnpjeUE5SUNobGJHVnRJQ3dnWm1GMktTQTlQaUI3WEhKY2JpQWdhV1lnS0NGbVlYWXBJSHRjY2x4dUlDQWdJR1ZzWlcwdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnblptRjJiM0pwZEdVbktUdGNjbHh1SUNBZ0lHVnNaVzB1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25ibTkwTFdaaGRtOXlhWFJsSnlrN1hISmNiaUFnSUNCbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnbllYSnBZUzFzWVdKbGJDY2dMQ0FuYldGeWF5QmhjeUJtWVhadmNtbDBaU2NwTzF4eVhHNWNjbHh1WEhKY2JpQWdmV1ZzYzJVZ2UxeHlYRzVjY2x4dUlDQWdJR1ZzWlcwdVkyeGhjM05NYVhOMExuSmxiVzkyWlNnbmJtOTBMV1poZG05eWFYUmxKeWs3WEhKY2JpQWdJQ0JsYkdWdExtTnNZWE56VEdsemRDNWhaR1FvSjJaaGRtOXlhWFJsSnlrN1hISmNiaUFnSUNCbGJHVnRMbk5sZEVGMGRISnBZblYwWlNnbllYSnBZUzFzWVdKbGJDY2dMQ0FuY21WdGIzWmxJR1p5YjIwZ1ptRjJiM0pwZEdWekp5azdYSEpjYmlBZ2ZWeHlYRzVjY2x4dWZWeHlYRzR2S2lwY2NseHVJQ29nUVdSa0lHMWhjbXRsY25NZ1ptOXlJR04xY25KbGJuUWdjbVZ6ZEdGMWNtRnVkSE1nZEc4Z2RHaGxJRzFoY0M1Y2NseHVJQ292WEhKY2JtTnZibk4wSUdGa1pFMWhjbXRsY25OVWIwMWhjQ0E5SUNoeVpYTjBZWFZ5WVc1MGN5QTlJSE5sYkdZdWNtVnpkR0YxY21GdWRITXBJRDArSUh0Y2NseHVJQ0J5WlhOMFlYVnlZVzUwY3k1bWIzSkZZV05vS0hKbGMzUmhkWEpoYm5RZ1BUNGdlMXh5WEc0Z0lDQWdMeThnUVdSa0lHMWhjbXRsY2lCMGJ5QjBhR1VnYldGd1hISmNiaUFnSUNCamIyNXpkQ0J0WVhKclpYSWdQU0JOWVdsdVJFSklaV3h3WlhJdWJXRndUV0Z5YTJWeVJtOXlVbVZ6ZEdGMWNtRnVkQ2h5WlhOMFlYVnlZVzUwTENCelpXeG1MbTFoY0NrN1hISmNiaUFnSUNCbmIyOW5iR1V1YldGd2N5NWxkbVZ1ZEM1aFpHUk1hWE4wWlc1bGNpaHRZWEpyWlhJc0lDZGpiR2xqYXljc0lDZ3BJRDArSUh0Y2NseHVJQ0FnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1TG1oeVpXWWdQU0J0WVhKclpYSXVkWEpzWEhKY2JpQWdJQ0I5S1R0Y2NseHVJQ0FnSUhObGJHWXViV0Z5YTJWeWN5NXdkWE5vS0cxaGNtdGxjaWs3WEhKY2JpQWdmU2s3WEhKY2JuMWNjbHh1WEhKY2JtTnZibk4wSUhOM1lYQmZiV0Z3SUQwZ0tDa2dQVDRnZXlBZ0lDQmNjbHh1SUNCcFppQW9aRzlqZFcxbGJuUXVaMlYwUld4bGJXVnVkRUo1U1dRb0oyMWhjQ2NwTG5OMGVXeGxMbVJwYzNCc1lYa2dQVDA5SUNkdWIyNWxKeWtnSUNBZ0lDQmNjbHh1SUNCN0lDQWdJQ0FnSUNCY2NseHVJQ0FnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R0WVhBbktTNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0oySnNiMk5ySnp0Y2NseHVJQ0FnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2R6ZEdGMGFXTmZiV0Z3SnlrdWMzUjViR1V1WkdsemNHeGhlU0E5SUNkdWIyNWxKenNnSUNBZ1hISmNiaUFnZlNBZ0lDQmNjbHh1ZlZ4dUx5b3FYSEpjYmlBcUlITjBZWEowSUhObGRtbGpaU0IzYjNKclpYSWdVbVZuYVhOMGNtRjBhVzl1TGx4eVhHNGdLaTljY2x4dVkyOXVjM1FnYzNSaGNuUlRaWEoyYVdObFYyOXlhMlZ5SUQwZ0tDa2dQVDU3SUZ4eVhHNGdJQ0FnYVdZZ0tDRnVZWFpwWjJGMGIzSXVjMlZ5ZG1salpWZHZjbXRsY2lrZ2NtVjBkWEp1TzF4eVhHNGdJRnh5WEc0Z0lDQWdibUYyYVdkaGRHOXlMbk5sY25acFkyVlhiM0pyWlhJdWNtVm5hWE4wWlhJb0p5OXpkeTVxY3ljcExuUm9aVzRvWm5WdVkzUnBiMjRvS1NCN1hISmNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RTWldkcGMzUnlZWFJwYjI0Z2QyOXlhMlZrSVNjcE8xeHlYRzRnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b0tTQjdYSEpjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkU1pXZHBjM1J5WVhScGIyNGdabUZwYkdWa0lTY3BPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzU5TzF4eVhHNXpkR0Z5ZEZObGNuWnBZMlZYYjNKclpYSW9LVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYmlobWRXNWpkR2x2YmlncElIdGNiaUFnWm5WdVkzUnBiMjRnZEc5QmNuSmhlU2hoY25JcElIdGNiaUFnSUNCeVpYUjFjbTRnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk5zYVdObExtTmhiR3dvWVhKeUtUdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEJ5YjIxcGMybG1lVkpsY1hWbGMzUW9jbVZ4ZFdWemRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lISmxjWFZsYzNRdWIyNXpkV05qWlhOeklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WeGRXVnpkQzV5WlhOMWJIUXBPMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnY21WeGRXVnpkQzV2Ym1WeWNtOXlJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENoeVpYRjFaWE4wTG1WeWNtOXlLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCd2NtOXRhWE5wWm5sU1pYRjFaWE4wUTJGc2JDaHZZbW9zSUcxbGRHaHZaQ3dnWVhKbmN5a2dlMXh1SUNBZ0lIWmhjaUJ5WlhGMVpYTjBPMXh1SUNBZ0lIWmhjaUJ3SUQwZ2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQnlaWEYxWlhOMElEMGdiMkpxVzIxbGRHaHZaRjB1WVhCd2JIa29iMkpxTENCaGNtZHpLVHRjYmlBZ0lDQWdJSEJ5YjIxcGMybG1lVkpsY1hWbGMzUW9jbVZ4ZFdWemRDa3VkR2hsYmloeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnY0M1eVpYRjFaWE4wSUQwZ2NtVnhkV1Z6ZER0Y2JpQWdJQ0J5WlhSMWNtNGdjRHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhCeWIyMXBjMmxtZVVOMWNuTnZjbEpsY1hWbGMzUkRZV3hzS0c5aWFpd2diV1YwYUc5a0xDQmhjbWR6S1NCN1hHNGdJQ0FnZG1GeUlIQWdQU0J3Y205dGFYTnBabmxTWlhGMVpYTjBRMkZzYkNodlltb3NJRzFsZEdodlpDd2dZWEpuY3lrN1hHNGdJQ0FnY21WMGRYSnVJSEF1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkRkWEp6YjNJb2RtRnNkV1VzSUhBdWNtVnhkV1Z6ZENrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQm1kVzVqZEdsdmJpQndjbTk0ZVZCeWIzQmxjblJwWlhNb1VISnZlSGxEYkdGemN5d2dkR0Z5WjJWMFVISnZjQ3dnY0hKdmNHVnlkR2xsY3lrZ2UxeHVJQ0FnSUhCeWIzQmxjblJwWlhNdVptOXlSV0ZqYUNobWRXNWpkR2x2Ymlod2NtOXdLU0I3WEc0Z0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1VISnZlSGxEYkdGemN5NXdjbTkwYjNSNWNHVXNJSEJ5YjNBc0lIdGNiaUFnSUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwYzF0MFlYSm5aWFJRY205d1hWdHdjbTl3WFR0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmloMllXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpXM1JoY21kbGRGQnliM0JkVzNCeWIzQmRJRDBnZG1Gc08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhCeWIzaDVVbVZ4ZFdWemRFMWxkR2h2WkhNb1VISnZlSGxEYkdGemN5d2dkR0Z5WjJWMFVISnZjQ3dnUTI5dWMzUnlkV04wYjNJc0lIQnliM0JsY25ScFpYTXBJSHRjYmlBZ0lDQndjbTl3WlhKMGFXVnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9jSEp2Y0NrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0VvY0hKdmNDQnBiaUJEYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVcEtTQnlaWFIxY200N1hHNGdJQ0FnSUNCUWNtOTRlVU5zWVhOekxuQnliM1J2ZEhsd1pWdHdjbTl3WFNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjSEp2YldsemFXWjVVbVZ4ZFdWemRFTmhiR3dvZEdocGMxdDBZWEpuWlhSUWNtOXdYU3dnY0hKdmNDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCd2NtOTRlVTFsZEdodlpITW9VSEp2ZUhsRGJHRnpjeXdnZEdGeVoyVjBVSEp2Y0N3Z1EyOXVjM1J5ZFdOMGIzSXNJSEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0J3Y205d1pYSjBhV1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvY0hKdmNDa2dlMXh1SUNBZ0lDQWdhV1lnS0NFb2NISnZjQ0JwYmlCRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXBLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQlFjbTk0ZVVOc1lYTnpMbkJ5YjNSdmRIbHdaVnR3Y205d1hTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGMxdDBZWEpuWlhSUWNtOXdYVnR3Y205d1hTNWhjSEJzZVNoMGFHbHpXM1JoY21kbGRGQnliM0JkTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJR1oxYm1OMGFXOXVJSEJ5YjNoNVEzVnljMjl5VW1WeGRXVnpkRTFsZEdodlpITW9VSEp2ZUhsRGJHRnpjeXdnZEdGeVoyVjBVSEp2Y0N3Z1EyOXVjM1J5ZFdOMGIzSXNJSEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0J3Y205d1pYSjBhV1Z6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvY0hKdmNDa2dlMXh1SUNBZ0lDQWdhV1lnS0NFb2NISnZjQ0JwYmlCRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVXBLU0J5WlhSMWNtNDdYRzRnSUNBZ0lDQlFjbTk0ZVVOc1lYTnpMbkJ5YjNSdmRIbHdaVnR3Y205d1hTQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0hKdmJXbHphV1o1UTNWeWMyOXlVbVZ4ZFdWemRFTmhiR3dvZEdocGMxdDBZWEpuWlhSUWNtOXdYU3dnY0hKdmNDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCSmJtUmxlQ2hwYm1SbGVDa2dlMXh1SUNBZ0lIUm9hWE11WDJsdVpHVjRJRDBnYVc1a1pYZzdYRzRnSUgxY2JseHVJQ0J3Y205NGVWQnliM0JsY25ScFpYTW9TVzVrWlhnc0lDZGZhVzVrWlhnbkxDQmJYRzRnSUNBZ0oyNWhiV1VuTEZ4dUlDQWdJQ2RyWlhsUVlYUm9KeXhjYmlBZ0lDQW5iWFZzZEdsRmJuUnllU2NzWEc0Z0lDQWdKM1Z1YVhGMVpTZGNiaUFnWFNrN1hHNWNiaUFnY0hKdmVIbFNaWEYxWlhOMFRXVjBhRzlrY3loSmJtUmxlQ3dnSjE5cGJtUmxlQ2NzSUVsRVFrbHVaR1Y0TENCYlhHNGdJQ0FnSjJkbGRDY3NYRzRnSUNBZ0oyZGxkRXRsZVNjc1hHNGdJQ0FnSjJkbGRFRnNiQ2NzWEc0Z0lDQWdKMmRsZEVGc2JFdGxlWE1uTEZ4dUlDQWdJQ2RqYjNWdWRDZGNiaUFnWFNrN1hHNWNiaUFnY0hKdmVIbERkWEp6YjNKU1pYRjFaWE4wVFdWMGFHOWtjeWhKYm1SbGVDd2dKMTlwYm1SbGVDY3NJRWxFUWtsdVpHVjRMQ0JiWEc0Z0lDQWdKMjl3Wlc1RGRYSnpiM0luTEZ4dUlDQWdJQ2R2Y0dWdVMyVjVRM1Z5YzI5eUoxeHVJQ0JkS1R0Y2JseHVJQ0JtZFc1amRHbHZiaUJEZFhKemIzSW9ZM1Z5YzI5eUxDQnlaWEYxWlhOMEtTQjdYRzRnSUNBZ2RHaHBjeTVmWTNWeWMyOXlJRDBnWTNWeWMyOXlPMXh1SUNBZ0lIUm9hWE11WDNKbGNYVmxjM1FnUFNCeVpYRjFaWE4wTzF4dUlDQjlYRzVjYmlBZ2NISnZlSGxRY205d1pYSjBhV1Z6S0VOMWNuTnZjaXdnSjE5amRYSnpiM0luTENCYlhHNGdJQ0FnSjJScGNtVmpkR2x2Ymljc1hHNGdJQ0FnSjJ0bGVTY3NYRzRnSUNBZ0ozQnlhVzFoY25sTFpYa25MRnh1SUNBZ0lDZDJZV3gxWlNkY2JpQWdYU2s3WEc1Y2JpQWdjSEp2ZUhsU1pYRjFaWE4wVFdWMGFHOWtjeWhEZFhKemIzSXNJQ2RmWTNWeWMyOXlKeXdnU1VSQ1EzVnljMjl5TENCYlhHNGdJQ0FnSjNWd1pHRjBaU2NzWEc0Z0lDQWdKMlJsYkdWMFpTZGNiaUFnWFNrN1hHNWNiaUFnTHk4Z2NISnZlSGtnSjI1bGVIUW5JRzFsZEdodlpITmNiaUFnV3lkaFpIWmhibU5sSnl3Z0oyTnZiblJwYm5WbEp5d2dKMk52Ym5ScGJuVmxVSEpwYldGeWVVdGxlU2RkTG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYldWMGFHOWtUbUZ0WlNrZ2UxeHVJQ0FnSUdsbUlDZ2hLRzFsZEdodlpFNWhiV1VnYVc0Z1NVUkNRM1Z5YzI5eUxuQnliM1J2ZEhsd1pTa3BJSEpsZEhWeWJqdGNiaUFnSUNCRGRYSnpiM0l1Y0hKdmRHOTBlWEJsVzIxbGRHaHZaRTVoYldWZElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kzVnljMjl5SUQwZ2RHaHBjenRjYmlBZ0lDQWdJSFpoY2lCaGNtZHpJRDBnWVhKbmRXMWxiblJ6TzF4dUlDQWdJQ0FnY21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BMblJvWlc0b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJR04xY25OdmNpNWZZM1Z5YzI5eVcyMWxkR2h2WkU1aGJXVmRMbUZ3Y0d4NUtHTjFjbk52Y2k1ZlkzVnljMjl5TENCaGNtZHpLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5YjIxcGMybG1lVkpsY1hWbGMzUW9ZM1Z5YzI5eUxsOXlaWEYxWlhOMEtTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YyWVd4MVpTa2djbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnUTNWeWMyOXlLSFpoYkhWbExDQmpkWEp6YjNJdVgzSmxjWFZsYzNRcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc0Z0lIMHBPMXh1WEc0Z0lHWjFibU4wYVc5dUlFOWlhbVZqZEZOMGIzSmxLSE4wYjNKbEtTQjdYRzRnSUNBZ2RHaHBjeTVmYzNSdmNtVWdQU0J6ZEc5eVpUdGNiaUFnZlZ4dVhHNGdJRTlpYW1WamRGTjBiM0psTG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZKYm1SbGVDQTlJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnU1c1a1pYZ29kR2hwY3k1ZmMzUnZjbVV1WTNKbFlYUmxTVzVrWlhndVlYQndiSGtvZEdocGN5NWZjM1J2Y21Vc0lHRnlaM1Z0Wlc1MGN5a3BPMXh1SUNCOU8xeHVYRzRnSUU5aWFtVmpkRk4wYjNKbExuQnliM1J2ZEhsd1pTNXBibVJsZUNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dTVzVrWlhnb2RHaHBjeTVmYzNSdmNtVXVhVzVrWlhndVlYQndiSGtvZEdocGN5NWZjM1J2Y21Vc0lHRnlaM1Z0Wlc1MGN5a3BPMXh1SUNCOU8xeHVYRzRnSUhCeWIzaDVVSEp2Y0dWeWRHbGxjeWhQWW1wbFkzUlRkRzl5WlN3Z0oxOXpkRzl5WlNjc0lGdGNiaUFnSUNBbmJtRnRaU2NzWEc0Z0lDQWdKMnRsZVZCaGRHZ25MRnh1SUNBZ0lDZHBibVJsZUU1aGJXVnpKeXhjYmlBZ0lDQW5ZWFYwYjBsdVkzSmxiV1Z1ZENkY2JpQWdYU2s3WEc1Y2JpQWdjSEp2ZUhsU1pYRjFaWE4wVFdWMGFHOWtjeWhQWW1wbFkzUlRkRzl5WlN3Z0oxOXpkRzl5WlNjc0lFbEVRazlpYW1WamRGTjBiM0psTENCYlhHNGdJQ0FnSjNCMWRDY3NYRzRnSUNBZ0oyRmtaQ2NzWEc0Z0lDQWdKMlJsYkdWMFpTY3NYRzRnSUNBZ0oyTnNaV0Z5Snl4Y2JpQWdJQ0FuWjJWMEp5eGNiaUFnSUNBbloyVjBRV3hzSnl4Y2JpQWdJQ0FuWjJWMFMyVjVKeXhjYmlBZ0lDQW5aMlYwUVd4c1MyVjVjeWNzWEc0Z0lDQWdKMk52ZFc1MEoxeHVJQ0JkS1R0Y2JseHVJQ0J3Y205NGVVTjFjbk52Y2xKbGNYVmxjM1JOWlhSb2IyUnpLRTlpYW1WamRGTjBiM0psTENBblgzTjBiM0psSnl3Z1NVUkNUMkpxWldOMFUzUnZjbVVzSUZ0Y2JpQWdJQ0FuYjNCbGJrTjFjbk52Y2ljc1hHNGdJQ0FnSjI5d1pXNUxaWGxEZFhKemIzSW5YRzRnSUYwcE8xeHVYRzRnSUhCeWIzaDVUV1YwYUc5a2N5aFBZbXBsWTNSVGRHOXlaU3dnSjE5emRHOXlaU2NzSUVsRVFrOWlhbVZqZEZOMGIzSmxMQ0JiWEc0Z0lDQWdKMlJsYkdWMFpVbHVaR1Y0SjF4dUlDQmRLVHRjYmx4dUlDQm1kVzVqZEdsdmJpQlVjbUZ1YzJGamRHbHZiaWhwWkdKVWNtRnVjMkZqZEdsdmJpa2dlMXh1SUNBZ0lIUm9hWE11WDNSNElEMGdhV1JpVkhKaGJuTmhZM1JwYjI0N1hHNGdJQ0FnZEdocGN5NWpiMjF3YkdWMFpTQTlJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnYVdSaVZISmhibk5oWTNScGIyNHViMjVqYjIxd2JHVjBaU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtDazdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdhV1JpVkhKaGJuTmhZM1JwYjI0dWIyNWxjbkp2Y2lBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9hV1JpVkhKaGJuTmhZM1JwYjI0dVpYSnliM0lwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUdsa1lsUnlZVzV6WVdOMGFXOXVMbTl1WVdKdmNuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dsa1lsUnlZVzV6WVdOMGFXOXVMbVZ5Y205eUtUdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JVY21GdWMyRmpkR2x2Ymk1d2NtOTBiM1I1Y0dVdWIySnFaV04wVTNSdmNtVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUU5aWFtVmpkRk4wYjNKbEtIUm9hWE11WDNSNExtOWlhbVZqZEZOMGIzSmxMbUZ3Y0d4NUtIUm9hWE11WDNSNExDQmhjbWQxYldWdWRITXBLVHRjYmlBZ2ZUdGNibHh1SUNCd2NtOTRlVkJ5YjNCbGNuUnBaWE1vVkhKaGJuTmhZM1JwYjI0c0lDZGZkSGduTENCYlhHNGdJQ0FnSjI5aWFtVmpkRk4wYjNKbFRtRnRaWE1uTEZ4dUlDQWdJQ2R0YjJSbEoxeHVJQ0JkS1R0Y2JseHVJQ0J3Y205NGVVMWxkR2h2WkhNb1ZISmhibk5oWTNScGIyNHNJQ2RmZEhnbkxDQkpSRUpVY21GdWMyRmpkR2x2Yml3Z1cxeHVJQ0FnSUNkaFltOXlkQ2RjYmlBZ1hTazdYRzVjYmlBZ1puVnVZM1JwYjI0Z1ZYQm5jbUZrWlVSQ0tHUmlMQ0J2YkdSV1pYSnphVzl1TENCMGNtRnVjMkZqZEdsdmJpa2dlMXh1SUNBZ0lIUm9hWE11WDJSaUlEMGdaR0k3WEc0Z0lDQWdkR2hwY3k1dmJHUldaWEp6YVc5dUlEMGdiMnhrVm1WeWMybHZianRjYmlBZ0lDQjBhR2x6TG5SeVlXNXpZV04wYVc5dUlEMGdibVYzSUZSeVlXNXpZV04wYVc5dUtIUnlZVzV6WVdOMGFXOXVLVHRjYmlBZ2ZWeHVYRzRnSUZWd1ozSmhaR1ZFUWk1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsVDJKcVpXTjBVM1J2Y21VZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRTlpYW1WamRGTjBiM0psS0hSb2FYTXVYMlJpTG1OeVpXRjBaVTlpYW1WamRGTjBiM0psTG1Gd2NHeDVLSFJvYVhNdVgyUmlMQ0JoY21kMWJXVnVkSE1wS1R0Y2JpQWdmVHRjYmx4dUlDQndjbTk0ZVZCeWIzQmxjblJwWlhNb1ZYQm5jbUZrWlVSQ0xDQW5YMlJpSnl3Z1cxeHVJQ0FnSUNkdVlXMWxKeXhjYmlBZ0lDQW5kbVZ5YzJsdmJpY3NYRzRnSUNBZ0oyOWlhbVZqZEZOMGIzSmxUbUZ0WlhNblhHNGdJRjBwTzF4dVhHNGdJSEJ5YjNoNVRXVjBhRzlrY3loVmNHZHlZV1JsUkVJc0lDZGZaR0luTENCSlJFSkVZWFJoWW1GelpTd2dXMXh1SUNBZ0lDZGtaV3hsZEdWUFltcGxZM1JUZEc5eVpTY3NYRzRnSUNBZ0oyTnNiM05sSjF4dUlDQmRLVHRjYmx4dUlDQm1kVzVqZEdsdmJpQkVRaWhrWWlrZ2UxeHVJQ0FnSUhSb2FYTXVYMlJpSUQwZ1pHSTdYRzRnSUgxY2JseHVJQ0JFUWk1d2NtOTBiM1I1Y0dVdWRISmhibk5oWTNScGIyNGdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZSeVlXNXpZV04wYVc5dUtIUm9hWE11WDJSaUxuUnlZVzV6WVdOMGFXOXVMbUZ3Y0d4NUtIUm9hWE11WDJSaUxDQmhjbWQxYldWdWRITXBLVHRjYmlBZ2ZUdGNibHh1SUNCd2NtOTRlVkJ5YjNCbGNuUnBaWE1vUkVJc0lDZGZaR0luTENCYlhHNGdJQ0FnSjI1aGJXVW5MRnh1SUNBZ0lDZDJaWEp6YVc5dUp5eGNiaUFnSUNBbmIySnFaV04wVTNSdmNtVk9ZVzFsY3lkY2JpQWdYU2s3WEc1Y2JpQWdjSEp2ZUhsTlpYUm9iMlJ6S0VSQ0xDQW5YMlJpSnl3Z1NVUkNSR0YwWVdKaGMyVXNJRnRjYmlBZ0lDQW5ZMnh2YzJVblhHNGdJRjBwTzF4dVhHNGdJQzh2SUVGa1pDQmpkWEp6YjNJZ2FYUmxjbUYwYjNKelhHNGdJQzh2SUZSUFJFODZJSEpsYlc5MlpTQjBhR2x6SUc5dVkyVWdZbkp2ZDNObGNuTWdaRzhnZEdobElISnBaMmgwSUhSb2FXNW5JSGRwZEdnZ2NISnZiV2x6WlhOY2JpQWdXeWR2Y0dWdVEzVnljMjl5Snl3Z0oyOXdaVzVMWlhsRGRYSnpiM0luWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0daMWJtTk9ZVzFsS1NCN1hHNGdJQ0FnVzA5aWFtVmpkRk4wYjNKbExDQkpibVJsZUYwdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloRGIyNXpkSEoxWTNSdmNpa2dlMXh1SUNBZ0lDQWdMeThnUkc5dUozUWdZM0psWVhSbElHbDBaWEpoZEdWTFpYbERkWEp6YjNJZ2FXWWdiM0JsYmt0bGVVTjFjbk52Y2lCa2IyVnpiaWQwSUdWNGFYTjBMbHh1SUNBZ0lDQWdhV1lnS0NFb1puVnVZMDVoYldVZ2FXNGdRMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsS1NrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnSUNCRGIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVmJablZ1WTA1aGJXVXVjbVZ3YkdGalpTZ25iM0JsYmljc0lDZHBkR1Z5WVhSbEp5bGRJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoY21keklEMGdkRzlCY25KaGVTaGhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kyRnNiR0poWTJzZ1BTQmhjbWR6VzJGeVozTXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnVZWFJwZG1WUFltcGxZM1FnUFNCMGFHbHpMbDl6ZEc5eVpTQjhmQ0IwYUdsekxsOXBibVJsZUR0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsY1hWbGMzUWdQU0J1WVhScGRtVlBZbXBsWTNSYlpuVnVZMDVoYldWZExtRndjR3g1S0c1aGRHbDJaVTlpYW1WamRDd2dZWEpuY3k1emJHbGpaU2d3TENBdE1Ta3BPMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBMbTl1YzNWalkyVnpjeUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05oYkd4aVlXTnJLSEpsY1hWbGMzUXVjbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMHBPMXh1WEc0Z0lDOHZJSEJ2YkhsbWFXeHNJR2RsZEVGc2JGeHVJQ0JiU1c1a1pYZ3NJRTlpYW1WamRGTjBiM0psWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0VOdmJuTjBjblZqZEc5eUtTQjdYRzRnSUNBZ2FXWWdLRU52Ym5OMGNuVmpkRzl5TG5CeWIzUnZkSGx3WlM1blpYUkJiR3dwSUhKbGRIVnlianRjYmlBZ0lDQkRiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1V1WjJWMFFXeHNJRDBnWm5WdVkzUnBiMjRvY1hWbGNua3NJR052ZFc1MEtTQjdYRzRnSUNBZ0lDQjJZWElnYVc1emRHRnVZMlVnUFNCMGFHbHpPMXh1SUNBZ0lDQWdkbUZ5SUdsMFpXMXpJRDBnVzEwN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabEtTQjdYRzRnSUNBZ0lDQWdJR2x1YzNSaGJtTmxMbWwwWlhKaGRHVkRkWEp6YjNJb2NYVmxjbmtzSUdaMWJtTjBhVzl1S0dOMWNuTnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doWTNWeWMyOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHbDBaVzF6S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FYUmxiWE11Y0hWemFDaGpkWEp6YjNJdWRtRnNkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmRXNTBJQ0U5UFNCMWJtUmxabWx1WldRZ0ppWWdhWFJsYlhNdWJHVnVaM1JvSUQwOUlHTnZkVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR2wwWlcxektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdZM1Z5YzI5eUxtTnZiblJwYm5WbEtDazdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlR0Y2JpQWdmU2s3WEc1Y2JpQWdkbUZ5SUdWNGNDQTlJSHRjYmlBZ0lDQnZjR1Z1T2lCbWRXNWpkR2x2YmlodVlXMWxMQ0IyWlhKemFXOXVMQ0IxY0dkeVlXUmxRMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJSFpoY2lCd0lEMGdjSEp2YldsemFXWjVVbVZ4ZFdWemRFTmhiR3dvYVc1a1pYaGxaRVJDTENBbmIzQmxiaWNzSUZ0dVlXMWxMQ0IyWlhKemFXOXVYU2s3WEc0Z0lDQWdJQ0IyWVhJZ2NtVnhkV1Z6ZENBOUlIQXVjbVZ4ZFdWemREdGNibHh1SUNBZ0lDQWdjbVZ4ZFdWemRDNXZiblZ3WjNKaFpHVnVaV1ZrWldRZ1BTQm1kVzVqZEdsdmJpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZFhCbmNtRmtaVU5oYkd4aVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RYQm5jbUZrWlVOaGJHeGlZV05yS0c1bGR5QlZjR2R5WVdSbFJFSW9jbVZ4ZFdWemRDNXlaWE4xYkhRc0lHVjJaVzUwTG05c1pGWmxjbk5wYjI0c0lISmxjWFZsYzNRdWRISmhibk5oWTNScGIyNHBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhBdWRHaGxiaWhtZFc1amRHbHZiaWhrWWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRVJDS0dSaUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1pHVnNaWFJsT2lCbWRXNWpkR2x2YmlodVlXMWxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjSEp2YldsemFXWjVVbVZ4ZFdWemRFTmhiR3dvYVc1a1pYaGxaRVJDTENBblpHVnNaWFJsUkdGMFlXSmhjMlVuTENCYmJtRnRaVjBwTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHMXZaSFZzWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0R0Y2JpQWdJQ0J0YjJSMWJHVXVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNGdJSDFjYmlBZ1pXeHpaU0I3WEc0Z0lDQWdjMlZzWmk1cFpHSWdQU0JsZUhBN1hHNGdJSDFjYm4wb0tTazdYRzRpWFgwPVxuIl19
